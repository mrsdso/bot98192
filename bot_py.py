#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
"""

import json
import nest_asyncio
import logging
import asyncio
import re
import uuid
from datetime import datetime, timedelta, time, date
from typing import Dict, List, Optional, Any, Tuple
import pytz

import gspread
from google.oauth2.service_account import Credentials
from oauth2client.service_account import ServiceAccountCredentials
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, 
    ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand
)
from telegram.ext import (
    Application, ContextTypes, ConversationHandler, CommandHandler,
    MessageHandler, CallbackQueryHandler, JobQueue, filters
)
from telegram.error import TelegramError
from telegram.constants import ChatMemberStatus, ChatType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
(MAIN_MENU, SELECT_GROUP, ENTER_NAME, SELECT_PERIOD, ENTER_PERIOD_VALUE,
 SELECT_WEEKDAYS, ENTER_START_DATE, ENTER_END_DATE, ENTER_TIME, 
 ENTER_TEXT, CONFIRM_EVENT, VIEW_EVENTS, EDIT_EVENT, DELETE_EVENT,
 EDIT_FIELD) = range(15)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
PERIOD_TYPES = {
    'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
    'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', 
    'monthly': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
    'once': '–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è',
    'custom_days': '–ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π',
    'weekdays': '–í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏'
}

# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
WEEKDAYS = {
    0: 'üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    1: 'üìÖ –í—Ç–æ—Ä–Ω–∏–∫', 
    2: 'üìÖ –°—Ä–µ–¥–∞',
    3: 'üìÖ –ß–µ—Ç–≤–µ—Ä–≥',
    4: 'üìÖ –ü—è—Ç–Ω–∏—Ü–∞',
    5: 'üìÖ –°—É–±–±–æ—Ç–∞',
    6: 'üìÖ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

class TelegramBot:
    async def back_to_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
            ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=reply_markup
        )
        return MAIN_MENU
    async def _get_user_admin_groups(self, user_id: int, bot) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {group_id: group_name} –¥–ª—è –≥—Ä—É–ø–ø, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        """
        admin_groups = {}
        for group_id, group_info in self.known_groups.items():
            try:
                chat_member = await bot.get_chat_member(chat_id=int(group_id), user_id=user_id)
                if chat_member.status in (ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                    if isinstance(group_info, dict) and 'title' in group_info:
                        group_name = group_info['title']
                    elif isinstance(group_info, str):
                        group_name = group_info
                    else:
                        group_name = f"–ì—Ä—É–ø–ø–∞ {group_id}"
                    admin_groups[group_id] = group_name
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
        return admin_groups
    async def handle_group_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è ConversationHandler (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –≥—Ä—É–ø–ø–∞—Ö)"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ known_groups –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        if update.effective_chat and update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
            chat_id = str(update.effective_chat.id)
            chat_title = update.effective_chat.title or f"–ì—Ä—É–ø–ø–∞ {chat_id}"
            
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            if chat_id not in self.known_groups:
                self.known_groups[chat_id] = {
                    "title": chat_title,
                    "added_date": datetime.now().isoformat()
                }
                self._save_known_groups()
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: {chat_title} ({chat_id})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            elif isinstance(self.known_groups[chat_id], dict) and self.known_groups[chat_id].get('title') != chat_title:
                self.known_groups[chat_id]['title'] = chat_title
                self._save_known_groups()
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {chat_title} ({chat_id})")
        
        return
    def create_conversation_handler(self):
        """–°–æ–∑–¥–∞—ë—Ç ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from telegram.ext import ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters

        return ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.main_menu)],
                SELECT_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.select_group)],
                ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_name)],
                SELECT_PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.select_period)],
                ENTER_PERIOD_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_period_value)],
                SELECT_WEEKDAYS: [CallbackQueryHandler(self.handle_weekday_selection)],
                ENTER_START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_start_date)],
                ENTER_END_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_end_date)],
                ENTER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_time)],
                ENTER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_text)],
                CONFIRM_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_confirm_event)],
                VIEW_EVENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.show_group_events)],
                EDIT_EVENT: [CallbackQueryHandler(self.handle_event_management)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
            allow_reentry=True,
            per_message=False
        )
    def __init__(self):
        self.token = self._load_token()
        self.service_account = self._load_service_account()
        self.known_groups = self._load_known_groups()
        self.user_data = {}
        self.sheets_client = None
        self.worksheet = None
        self.timezone = pytz.timezone('Europe/Moscow')
        self.scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
        
    def _load_token(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        try:
            with open('bot_token.txt', 'r', encoding='utf-8') as f:
                return f.read().strip()
        except FileNotFoundError:
            logger.error("–§–∞–π–ª bot_token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise
            
    def _load_service_account(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Google"""
        try:
            with open('service_account.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error("–§–∞–π–ª service_account.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise
            
    def _load_known_groups(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        try:
            with open('known_groups.json', 'r', encoding='utf-8') as f:
                content = f.read().strip()
                return json.loads(content) if content else {}
        except (FileNotFoundError, json.JSONDecodeError):
            return {}
            
    def _save_known_groups(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        with open('known_groups.json', 'w', encoding='utf-8') as f:
            json.dump(self.known_groups, f, ensure_ascii=False, indent=2)
            
    def _init_google_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –Ω–∞—á–∞–ª–∞—Å—å")
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ service_account.json")
            # Load service account credentials
            credentials = ServiceAccountCredentials.from_json_keyfile_name('service_account.json', self.scope)
            logger.info(f"Service Account Email: {credentials.service_account_email}")
            # Connect to Google Sheets
            self.gc = gspread.authorize(credentials)
            self.worksheet = self.gc.open("BotEvents").sheet1
            logger.info(f"Google Sheet —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç: {self.worksheet.title}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            try:
                headers = self.worksheet.row_values(1)
                expected_headers = ['ID', 'ChatID', 'Description', 'StartDate', 'EndDate', 'Forever', 'Time', 'PeriodType', 'PeriodValue', 'Text', 'Status']
                
                if not headers or headers != expected_headers:
                    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Google Sheets")
                    self.worksheet.clear()
                    self.worksheet.append_row(expected_headers)
                    logger.info("–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
            except Exception as header_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {header_error}")
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º scheduler –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not hasattr(self, 'scheduler'):
                from apscheduler.schedulers.asyncio import AsyncIOScheduler
                self.scheduler = AsyncIOScheduler()
                self.scheduler.start()
                logger.info("APScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
            
            logger.info("Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
            raise
            
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        keyboard = [
            ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
            ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram-–≥—Ä—É–ø–ø–∞—Ö.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        
        return MAIN_MENU
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
ü§ñ **–ë–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π**

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø

**–¢–∏–ø—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω–æ
‚Ä¢ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
‚Ä¢ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π
‚Ä¢ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
        
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        user_id = update.effective_user.id
        if user_id in self.user_data:
            del self.user_data[user_id]
            
        keyboard = [
            ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
            ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=reply_markup
        )
        return MAIN_MENU
        
    async def main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = update.message.text
        
        if text == 'üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ':
            return await self.start_create_event(update, context)
        elif text == 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π':
            return await self.view_events(update, context)
        elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
            await self.help_command(update, context)
            return MAIN_MENU
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é."
            )
            return MAIN_MENU
            
    async def start_create_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin_groups = await self._get_user_admin_groups(user_id, context.bot)
        
        if not admin_groups:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏–ª–∏ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—ã.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."
            )
            return MAIN_MENU
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_data[user_id] = {
            'admin_groups': admin_groups,
            'step': 'select_group'
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
        keyboard = []
        for group_id, group_name in admin_groups.items():
            keyboard.append([f"üì± {group_name}"])
        keyboard.append(['üîô –ù–∞–∑–∞–¥'])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üì± –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )
        
        return SELECT_GROUP
        
    async def select_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            return await self.back_to_main_menu(update, context)
            
        # –ù–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        if user_id not in self.user_data:
            return await self.start_create_event(update, context)
            
        admin_groups = self.user_data[user_id]['admin_groups']
        selected_group_id = None
        
        for group_id, group_name in admin_groups.items():
            if text == f"üì± {group_name}":
                selected_group_id = group_id
                break
                
        if not selected_group_id:
            await update.message.reply_text(
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
            return SELECT_GROUP
            
        self.user_data[user_id]['selected_group'] = selected_group_id
        self.user_data[user_id]['selected_group_name'] = admin_groups[selected_group_id]
        
        keyboard = [['üîô –ù–∞–∑–∞–¥']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {admin_groups[selected_group_id]}\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=reply_markup
        )
        
        return ENTER_NAME
        
    async def enter_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
            if (user_id in self.user_data and 
                'editing_event_id' in self.user_data[user_id]):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback query –¥–ª—è _show_event_edit_menu
                from telegram import CallbackQuery
                fake_query = CallbackQuery(
                    id="fake",
                    from_user=update.effective_user,
                    chat_instance="fake",
                    data=f"edit_{event_id}",
                    message=update.message
                )
                fake_update = type('obj', (object,), {'callback_query': fake_query})()
                
                return await self._show_event_edit_menu(fake_update, context, event_id)
            else:
                return await self.start_create_event(update, context)
            
        if len(text) > 100:
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return ENTER_NAME
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        if (user_id in self.user_data and 
            'editing_event_id' in self.user_data[user_id] and
            'editing_field' in self.user_data[user_id] and
            self.user_data[user_id]['editing_field'] == 'name'):
            
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ Google Sheets
            event_id = self.user_data[user_id]['editing_event_id']
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                all_values = self.worksheet.get_all_values()
                for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        self.worksheet.update_cell(i, 3, text)  # –ö–æ–ª–æ–Ω–∫–∞ Description (3-—è)
                        break
                
                await update.message.reply_text(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {text}")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.")
                return EDIT_EVENT
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            self.user_data[user_id]['event_name'] = text
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
            keyboard = [
                ['üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', 'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'],
                ['üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ', 'üìÖ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'],
                ['üìÖ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π', 'üìÖ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏'],
                ['üîô –ù–∞–∑–∞–¥']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {text}\n\n"
                "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
            
            return SELECT_PERIOD
        
    async def select_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        is_editing = user_id in self.user_data and 'editing_event_id' in self.user_data[user_id]
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            if is_editing:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                return await self._show_event_edit_menu_inline(update, context, event_id)
            else:
                keyboard = [['üîô –ù–∞–∑–∞–¥']]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                    reply_markup=reply_markup
                )
                return ENTER_NAME
            
        period_map = {
            'üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ': 'daily',
            'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ': 'weekly',
            'üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ': 'monthly',
            'üìÖ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è': 'once',
            'üìÖ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π': 'custom_days',
            'üìÖ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏': 'weekdays'
        }
        
        if text not in period_map:
            await update.message.reply_text(
                "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
            return SELECT_PERIOD
            
        period_type = period_map[text]
        
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ, —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
        if is_editing:
            event_id = self.user_data[user_id]['editing_event_id']
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã "–ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π", –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if period_type == 'custom_days':
                self.user_data[user_id]['editing_period_type'] = period_type
                keyboard = [['üîô –ù–∞–∑–∞–¥']]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–æ—Ç 1 –¥–æ 365):",
                    reply_markup=reply_markup
                )
                return ENTER_PERIOD_VALUE
                
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            elif period_type == 'weekdays':
                self.user_data[user_id]['editing_period_type'] = period_type
                return await self.select_weekdays_menu(update, context)
            
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º
            else:
                try:
                    await self._update_event_period(event_id, period_type, None)
                    await update.message.reply_text("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    return await self._show_event_edit_menu_inline(update, context, event_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏: {e}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
                    return EDIT_EVENT
        
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        else:
            self.user_data[user_id]['period_type'] = period_type
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã "–ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π", –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if period_type == 'custom_days':
                keyboard = [['üîô –ù–∞–∑–∞–¥']]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–æ—Ç 1 –¥–æ 365):",
                    reply_markup=reply_markup
                )
                return ENTER_PERIOD_VALUE
                
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            elif period_type == 'weekdays':
                return await self.select_weekdays_menu(update, context)
                
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
            else:
                self.user_data[user_id]['period_value'] = None
                return await self.ask_start_date(update, context)
            
    async def enter_period_value(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        is_editing = user_id in self.user_data and 'editing_event_id' in self.user_data[user_id]
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            if is_editing:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                return await self._show_event_edit_menu_inline(update, context, event_id)
            else:
                keyboard = [
                    ['üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', 'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'],
                    ['üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ', 'üìÖ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'],
                    ['üìÖ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π', 'üìÖ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏'],
                    ['üîô –ù–∞–∑–∞–¥']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                    reply_markup=reply_markup
                )
                return SELECT_PERIOD
            
        try:
            days = int(text)
            if days < 1 or days > 365:
                raise ValueError
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 365."
            )
            return ENTER_PERIOD_VALUE
        
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ, —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
        if is_editing:
            event_id = self.user_data[user_id]['editing_event_id']
            period_type = self.user_data[user_id].get('editing_period_type', 'custom_days')
            
            try:
                await self._update_event_period(event_id, period_type, days)
                await update.message.reply_text("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                return await self._show_event_edit_menu_inline(update, context, event_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
                return EDIT_EVENT
        
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        else:
            self.user_data[user_id]['period_value'] = days
            return await self.ask_start_date(update, context)
        
    async def select_weekdays_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'selected_weekdays' not in self.user_data[user_id]:
            self.user_data[user_id]['selected_weekdays'] = set()
            
        selected_days = self.user_data[user_id]['selected_weekdays']
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for day_num, day_name in WEEKDAYS.items():
            prefix = "‚úÖ " if day_num in selected_days else "‚¨ú "
            keyboard.append([InlineKeyboardButton(
                f"{prefix}{day_name}", 
                callback_data=f"weekday_{day_num}"
            )])
            
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="weekdays_done")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="weekdays_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        selected_names = [WEEKDAYS[day] for day in sorted(selected_days)]
        selected_text = ", ".join(selected_names) if selected_names else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
        
        text = (
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏: {selected_text}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã:"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
            
        return SELECT_WEEKDAYS
        
    async def handle_weekday_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        data = query.data
        
        if data == "weekdays_back":
            keyboard = [
                ['üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', 'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'],
                ['üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ', 'üìÖ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'],
                ['üìÖ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π', 'üìÖ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏'],
                ['üîô –ù–∞–∑–∞–¥']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await query.edit_message_text("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
            return SELECT_PERIOD
            
        elif data == "weekdays_done":
            selected_days = self.user_data[user_id].get('selected_weekdays', set())
            
            if not selected_days:
                await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", show_alert=True)
                return SELECT_WEEKDAYS
                
            self.user_data[user_id]['period_value'] = list(selected_days)
            
            await query.edit_message_text("‚úÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω—ã")
            return await self.ask_start_date(update, context)
            
        elif data.startswith("weekday_"):
            day_num = int(data.split("_")[1])
            selected_days = self.user_data[user_id]['selected_weekdays']
            
            if day_num in selected_days:
                selected_days.remove(day_num)
            else:
                selected_days.add(day_num)
                
            return await self.select_weekdays_menu(update, context)
            
    async def ask_start_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
        keyboard = [['üîô –ù–∞–∑–∞–¥']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        today = datetime.now().strftime("%d.%m.%Y")
        
        text = (
            f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: {today}\n\n"
            f"–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '—Å–µ–≥–æ–¥–Ω—è' –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã:"
        )
        
        if update.callback_query:
            await context.bot.send_message(
                chat_id=update.callback_query.message.chat_id,
                text=text,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
            
        return ENTER_START_DATE
        
    async def enter_start_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
        user_id = update.effective_user.id
        text = update.message.text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        is_editing = user_id in self.user_data and 'editing_event_id' in self.user_data[user_id]
        
        if text == 'üîô –Ω–∞–∑–∞–¥':
            if is_editing:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if 'editing_event_id' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_event_id']
                if 'editing_field' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
            else:
                period_type = self.user_data[user_id].get('period_type', 'once')
                
                if period_type == 'custom_days':
                    keyboard = [['üîô –ù–∞–∑–∞–¥']]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await update.message.reply_text(
                        "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–æ—Ç 1 –¥–æ 365):",
                        reply_markup=reply_markup
                    )
                    return ENTER_PERIOD_VALUE
                elif period_type == 'weekdays':
                    return await self.select_weekdays_menu(update, context)
                else:
                    keyboard = [
                        ['üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', 'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'],
                        ['üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ', 'üìÖ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'],
                        ['üìÖ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π', 'üìÖ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏'],
                        ['üîô –ù–∞–∑–∞–¥']
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await update.message.reply_text(
                        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                        reply_markup=reply_markup
                    )
                    return SELECT_PERIOD
                
        try:
            if text == '—Å–µ–≥–æ–¥–Ω—è':
                start_date = datetime.now().date()
            else:
                start_date = datetime.strptime(update.message.text, "%d.%m.%Y").date()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            if start_date < datetime.now().date():
                await update.message.reply_text(
                    "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
                )
                return ENTER_START_DATE
                
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è'."
            )
            return ENTER_START_DATE
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        if is_editing:
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ Google Sheets
            event_id = self.user_data[user_id]['editing_event_id']
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
                all_values = self.worksheet.get_all_values()
                for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        self.worksheet.update_cell(i, 4, start_date.strftime('%Y-%m-%d'))  # –ö–æ–ª–æ–Ω–∫–∞ StartDate (4-—è)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                        rows = self.worksheet.get_all_records()
                        event_data = None
                        for event_row in rows:
                            if str(event_row.get('ID', '')).strip() == str(event_id).strip():
                                event_data = event_row
                                break
                        
                        if event_data:
                            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
                            await self._reschedule_event_jobs(event_id)
                        
                        break
                
                await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {start_date.strftime('%d.%m.%Y')}")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if 'editing_event_id' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_event_id']
                if 'editing_field' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.")
                return EDIT_EVENT
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            self.user_data[user_id]['start_date'] = start_date
            
            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—Ä–µ–º–µ–Ω–∏
            period_type = self.user_data[user_id].get('period_type', 'once')
            if period_type == 'once':
                self.user_data[user_id]['end_date'] = None
                self.user_data[user_id]['forever'] = False
                return await self.ask_time(update, context)
            
            # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            keyboard = [
                ['‚ôæÔ∏è –í–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)'],
                ['üîô –ù–∞–∑–∞–¥']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date.strftime('%d.%m.%Y')}\n\n"
                f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                f"–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)':",
                reply_markup=reply_markup
            )
            
            return ENTER_END_DATE
        
    async def enter_end_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
            if (user_id in self.user_data and 
                'editing_event_id' in self.user_data[user_id]):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
            else:
                return await self.ask_start_date(update, context)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        if (user_id in self.user_data and 
            'editing_event_id' in self.user_data[user_id] and
            'editing_field' in self.user_data[user_id] and
            self.user_data[user_id]['editing_field'] == 'end_date'):
            
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            event_id = self.user_data[user_id]['editing_event_id']
            
            if text.lower() in ['–Ω–∞–≤—Å–µ–≥–¥–∞', 'forever', '‚ôæÔ∏è –≤–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)']:
                forever_value = True
                end_date_str = ''
            else:
                try:
                    end_date = datetime.strptime(text, "%d.%m.%Y").date()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Sheets
                    all_values = self.worksheet.get_all_values()
                    start_date_str = None
                    for row in all_values[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                            start_date_str = row[3]  # StartDate –≤ 4-–π –∫–æ–ª–æ–Ω–∫–µ
                            break
                    
                    if start_date_str:
                        start_date = datetime.strptime(start_date_str, "%Y-%m-%d").date()
                        if end_date <= start_date:
                            await update.message.reply_text(
                                "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞."
                            )
                            return ENTER_END_DATE
                    
                    forever_value = False
                    end_date_str = end_date.strftime('%Y-%m-%d')
                    
                except ValueError:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '–Ω–∞–≤—Å–µ–≥–¥–∞'."
                    )
                    return ENTER_END_DATE
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                all_values = self.worksheet.get_all_values()
                for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        self.worksheet.update_cell(i, 5, end_date_str)  # –ö–æ–ª–æ–Ω–∫–∞ EndDate (5-—è)
                        self.worksheet.update_cell(i, 6, str(forever_value))  # –ö–æ–ª–æ–Ω–∫–∞ Forever (6-—è)
                        break
                
                if forever_value:
                    await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–¥–µ–ª–∞–Ω–æ –±–µ—Å—Å—Ä–æ—á–Ω—ã–º")
                else:
                    await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {text}")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
                return ENTER_END_DATE
        
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        if text == '‚ôæÔ∏è –í–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)':
            self.user_data[user_id]['end_date'] = None
            self.user_data[user_id]['forever'] = True
        else:
            try:
                end_date = datetime.strptime(text, "%d.%m.%Y").date()
                start_date = self.user_data[user_id]['start_date']
                
                if end_date <= start_date:
                    await update.message.reply_text(
                        "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞."
                    )
                    return ENTER_END_DATE
                    
                self.user_data[user_id]['end_date'] = end_date
                self.user_data[user_id]['forever'] = False
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
                )
                return ENTER_END_DATE
                
        return await self.ask_time(update, context)
        
    async def ask_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        keyboard = [['üîô –ù–∞–∑–∞–¥']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:30 –∏–ª–∏ 14:00",
            reply_markup=reply_markup
        )
        
        return ENTER_TIME
        
    async def enter_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
            if (user_id in self.user_data and 
                'editing_event_id' in self.user_data[user_id]):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
            else:
                period_type = self.user_data[user_id]['period_type']
                
                if period_type == 'once':
                    return await self.ask_start_date(update, context)
                else:
                    keyboard = [
                        ['‚ôæÔ∏è –í–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)'],
                        ['üîô –ù–∞–∑–∞–¥']
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    
                    start_date = self.user_data[user_id]['start_date']
                    await update.message.reply_text(
                        f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date.strftime('%d.%m.%Y')}\n\n"
                        f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                        f"–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)':",
                        reply_markup=reply_markup
                    )
                    return ENTER_END_DATE
                
        try:
            time_obj = datetime.strptime(text, "%H:%M").time()
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)."
            )
            return ENTER_TIME
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        if (user_id in self.user_data and 
            'editing_event_id' in self.user_data[user_id] and
            'editing_field' in self.user_data[user_id] and
            self.user_data[user_id]['editing_field'] == 'time'):
            
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ Google Sheets
            event_id = self.user_data[user_id]['editing_event_id']
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                all_values = self.worksheet.get_all_values()
                for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        self.worksheet.update_cell(i, 7, time_obj.strftime('%H:%M'))  # –ö–æ–ª–æ–Ω–∫–∞ Time (7-—è)
                        break
                
                await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {time_obj.strftime('%H:%M')}")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.")
                return EDIT_EVENT
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            self.user_data[user_id]['time'] = time_obj
            
            keyboard = [['üîô –ù–∞–∑–∞–¥']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {time_obj.strftime('%H:%M')}\n\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )
        
        return ENTER_TEXT
        
    async def enter_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        is_editing = (user_id in self.user_data and 
                     'editing_event_id' in self.user_data[user_id] and
                     'editing_field' in self.user_data[user_id] and
                     self.user_data[user_id]['editing_field'] == 'text')
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            if is_editing:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if 'editing_event_id' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_event_id']
                if 'editing_field' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
            else:
                return await self.ask_time(update, context)
            
        if len(text) > 4096:
            await update.message.reply_text(
                "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return ENTER_TEXT
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        if is_editing:
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ Google Sheets
            event_id = self.user_data[user_id]['editing_event_id']
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                all_values = self.worksheet.get_all_values()
                for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        self.worksheet.update_cell(i, 10, text)  # –ö–æ–ª–æ–Ω–∫–∞ Text (10-—è)
                        break
                
                await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if 'editing_event_id' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_event_id']
                if 'editing_field' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.")
                return EDIT_EVENT
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            self.user_data[user_id]['text'] = text
            return await self.confirm_event(update, context)
        
    async def confirm_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user_id = update.effective_user.id
        data = self.user_data[user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
        period_type = data['period_type']
        if period_type == 'daily':
            period_desc = "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
        elif period_type == 'weekly':
            period_desc = "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
        elif period_type == 'monthly':
            period_desc = "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
        elif period_type == 'once':
            period_desc = "–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
        elif period_type == 'custom_days':
            period_desc = f"–ö–∞–∂–¥—ã–µ {data['period_value']} –¥–Ω."
        elif period_type == 'weekdays':
            days = [WEEKDAYS[d].replace('üìÖ ', '') for d in sorted(data['period_value'])]
            period_desc = f"–ü–æ –¥–Ω—è–º: {', '.join(days)}"
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç
        start_date_str = data['start_date'].strftime('%d.%m.%Y')
        if data.get('forever'):
            date_desc = f"—Å {start_date_str} (–≤–µ—á–Ω–æ)"
        elif data.get('end_date'):
            end_date_str = data['end_date'].strftime('%d.%m.%Y')
            date_desc = f"—Å {start_date_str} –ø–æ {end_date_str}"
        else:
            date_desc = f"–Ω–∞ {start_date_str}"
            
        preview_text = data['text'][:100] + "..." if len(data['text']) > 100 else data['text']
        
        confirmation_text = (
            f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è**\n\n"
            f"üì± –ì—Ä—É–ø–ø–∞: {data['selected_group_name']}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['event_name']}\n"
            f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {period_desc}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_desc}\n"
            f"üïê –í—Ä–µ–º—è: {data['time'].strftime('%H:%M')}\n"
            f"üìÑ –¢–µ–∫—Å—Ç: {preview_text}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è?"
        )
        
        keyboard = [
            ['‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ'],
            ['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            confirmation_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return CONFIRM_EVENT
        
    async def handle_confirm_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == '‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ':
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Sheets
                event_id = await self._save_event_to_sheets(user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                rows = self.worksheet.get_all_records()
                event_data = None
                for row in rows:
                    if str(row.get('ID', '')).strip() == str(event_id).strip():
                        event_data = row
                        break
                
                if event_data:
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    await self._schedule_event_jobs(event_data)
                
                keyboard = [
                    ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
                    ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n"
                    f"ID —Å–æ–±—ã—Ç–∏—è: {event_id}\n\n"
                    f"–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
                    reply_markup=reply_markup
                )
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del self.user_data[user_id]
                return MAIN_MENU
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return CONFIRM_EVENT
                
        elif text == 'üîô –ù–∞–∑–∞–¥':
            keyboard = [['üîô –ù–∞–∑–∞–¥']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
            return ENTER_TEXT
            
        elif text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return await self.cancel(update, context)
            
    async def _save_event_to_sheets(self, user_id: int) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Sheets"""
        data = self.user_data[user_id]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è
        event_id = str(uuid.uuid4())[:8]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ID, ChatID, Description, StartDate, EndDate, Forever, Time, PeriodType, PeriodValue, Text, Status
        row_data = [
            event_id,
            str(data['selected_group']),
            data['event_name'],  # Description
            data['start_date'].strftime('%Y-%m-%d'),
            data['end_date'].strftime('%Y-%m-%d') if data.get('end_date') else '',
            'TRUE' if data.get('forever') else 'FALSE',
            data['time'].strftime('%H:%M'),
            data['period_type'],
            json.dumps(data['period_value']) if data['period_value'] else '',
            data['text'],
            'active'
        ]
        
        try:
            logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Sheets –Ω–∞—á–∞–ª–æ—Å—å")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
            self.worksheet.append_row(row_data)
            logger.info("–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Sheets")
            
            return event_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Google Sheets: {e}")
            raise
            
    async def _schedule_event_jobs(self, event_data: Dict):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        if not event_data:
            return
            
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        await self._schedule_next_publication(event_data)
        
    async def _schedule_next_publication(self, event_data: Dict, job_queue=None):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            start_date = datetime.strptime(event_data['StartDate'], '%Y-%m-%d').date()
            end_date = datetime.strptime(event_data['EndDate'], '%Y-%m-%d').date() if event_data['EndDate'] else None
            forever = event_data['Forever'] == 'TRUE'
            time_obj = datetime.strptime(event_data['Time'], '%H:%M').time()
            period_type = event_data['PeriodType']
            
            # –ü–∞—Ä—Å–∏–º period_value
            period_value = None
            if event_data['PeriodValue']:
                try:
                    if period_type == 'weekdays':
                        period_value = json.loads(event_data['PeriodValue'])
                    else:
                        period_value = int(event_data['PeriodValue'])
                except (json.JSONDecodeError, ValueError):
                    period_value = None
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            now = datetime.now()
            next_datetime = None
            
            if period_type == 'once':
                next_datetime = datetime.combine(start_date, time_obj)
                if next_datetime <= now:
                    # –°–æ–±—ã—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ
                    logger.info(f"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {event_data['ID']} —É–∂–µ –ø—Ä–æ—à–ª–æ")
                    return
                    
            elif period_type == 'daily':
                next_datetime = datetime.combine(start_date, time_obj)
                while next_datetime <= now:
                    next_datetime += timedelta(days=1)
                    
            elif period_type == 'weekly':
                next_datetime = datetime.combine(start_date, time_obj)
                while next_datetime <= now:
                    next_datetime += timedelta(weeks=1)
                    
            elif period_type == 'monthly':
                next_datetime = datetime.combine(start_date, time_obj)
                while next_datetime <= now:
                    if next_datetime.month == 12:
                        next_datetime = next_datetime.replace(year=next_datetime.year + 1, month=1)
                    else:
                        next_datetime = next_datetime.replace(month=next_datetime.month + 1)
                        
            elif period_type == 'custom_days' and period_value:
                next_datetime = datetime.combine(start_date, time_obj)
                while next_datetime <= now:
                    next_datetime += timedelta(days=period_value)
                    
            elif period_type == 'weekdays' and period_value:
                # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                current_date = max(start_date, now.date())
                found = False
                for i in range(14):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 2 –Ω–µ–¥–µ–ª–∏
                    check_date = current_date + timedelta(days=i)
                    if check_date.weekday() in period_value:
                        check_datetime = datetime.combine(check_date, time_obj)
                        if check_datetime > now:
                            next_datetime = check_datetime
                            found = True
                            break
                if not found:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']}")
                    return
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if not forever and end_date and next_datetime and next_datetime.date() > end_date:
                # –°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                logger.info(f"–°–æ–±—ã—Ç–∏–µ {event_data['ID']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date})")
                await self._update_event_status(event_data['ID'], 'completed')
                return
                
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ APScheduler
            if next_datetime and next_datetime > now:
                job_id = f"event_{event_data['ID']}_{int(next_datetime.timestamp())}"
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                existing_jobs = [job for job in self.scheduler.get_jobs() if job.id.startswith(f"event_{event_data['ID']}_")]
                for job in existing_jobs:
                    job.remove()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                self.scheduler.add_job(
                    func=self._publish_message_sync,
                    trigger='date',
                    run_date=next_datetime,
                    args=[event_data],
                    id=job_id,
                    misfire_grace_time=300  # 5 –º–∏–Ω—É—Ç grace time
                )
                
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']} –Ω–∞ {next_datetime}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']}: {e}")
            await self._update_event_status(event_data['ID'], 'error')
    
    def _publish_message_sync(self, event_data: Dict):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è APScheduler)"""
        import asyncio
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        if loop.is_running():
            # –ï—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            asyncio.create_task(self._publish_message_async(event_data))
        else:
            # –ï—Å–ª–∏ event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            loop.run_until_complete(self._publish_message_async(event_data))
    
    async def _publish_message_async(self, event_data: Dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            chat_id = int(event_data['ChatID'])
            text = event_data['Text']
            
            # –°–æ–∑–¥–∞–µ–º bot –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            from telegram import Bot
            bot = Bot(token=self.token)
            
            await bot.send_message(chat_id=chat_id, text=text)
            logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']} –≤ —á–∞—Ç {chat_id}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
            if event_data['PeriodType'] != 'once':
                await self._schedule_next_publication(event_data)
            else:
                # –î–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ completed
                await self._update_event_status(event_data['ID'], 'completed')
                logger.info(f"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {event_data['ID']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']}: {e}")
            await self._update_event_status(event_data['ID'], 'error')
            
    async def _update_event_status(self, event_id: str, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è"""
        try:
            rows = self.worksheet.get_all_records()
            for i, row in enumerate(rows, start=2):  # start=2 because row 1 is header
                if row['ID'] == event_id:
                    self.worksheet.update_cell(i, 11, status)  # Column 11 is Status
                    break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
            
    async def view_events(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin_groups = await self._get_user_admin_groups(user_id, context.bot)
        
        if not admin_groups:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return MAIN_MENU
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–∏—Ö –≥—Ä—É–ø–ø
        try:
            rows = self.worksheet.get_all_records()
            user_events = []
            
            for row in rows:
                if str(row.get('ChatID', '')) in admin_groups.keys():
                    user_events.append(row)
                    
            if not user_events:
                await update.message.reply_text(
                    "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
                )
                return MAIN_MENU
                
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
            events_by_group = {}
            for event in user_events:
                chat_id = str(event.get('ChatID', ''))
                if chat_id in admin_groups:
                    group_name = admin_groups[chat_id]
                    if group_name not in events_by_group:
                        events_by_group[group_name] = []
                    events_by_group[group_name].append(event)
                
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
            keyboard = []
            for group_name in events_by_group.keys():
                keyboard.append([f"üì± {group_name}"])
            keyboard.append(['üîô –ù–∞–∑–∞–¥'])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π:",
                reply_markup=reply_markup
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.user_data[user_id] = {
                'events_by_group': events_by_group,
                'admin_groups': admin_groups
            }
            
            return VIEW_EVENTS
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return MAIN_MENU
            
    async def show_group_events(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã"""
        user_id = update.effective_user.id
        text = update.message.text

        if text == 'üîô –ù–∞–∑–∞–¥':
            return await self.back_to_main_menu(update, context)

        if user_id not in self.user_data:
            return await self.view_events(update, context)

        events_by_group = self.user_data[user_id]['events_by_group']

        # –ù–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        selected_group = None
        for group_name in events_by_group.keys():
            if text == f"üì± {group_name}":
                selected_group = group_name
                break

        if not selected_group:
            await update.message.reply_text(
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
            return VIEW_EVENTS

        events = events_by_group[selected_group]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
        events_text = f"üìã **–°–æ–±—ã—Ç–∏—è –≥—Ä—É–ø–ø—ã {selected_group}:**\n\n"

        for i, event in enumerate(events, 1):
            status_emoji = {
                'active': 'üü¢',
                'completed': '‚úÖ',
                'error': '‚ùå'
            }.get(event['Status'], '‚ö™')

            period_desc = self._get_period_description(event)

            description = str(event.get('Description', ''))  # Ensure Description is a string

            events_text += (
                f"{i}. {status_emoji} **{description}**\n"
                f"   ID: `{event['ID']}`\n"
                f"   –ü–µ—Ä–∏–æ–¥: {period_desc}\n"
                f"   –í—Ä–µ–º—è: {event['Time']}\n"
                f"   –°—Ç–∞—Ç—É—Å: {event['Status']}\n\n"
            )

        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏
        keyboard = []
        for event in events:
            description = str(event.get('Description', ''))  # Ensure Description is a string
            keyboard.append([
                InlineKeyboardButton(
                    f"‚úèÔ∏è {description[:30]}...",
                    callback_data=f"edit_{event['ID']}"
                )
            ])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_groups")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            events_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        return EDIT_EVENT
        
    def _get_period_description(self, event: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è"""
        period_type = event['PeriodType']
        period_value = event['PeriodValue']
        
        if period_type == 'daily':
            return "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
        elif period_type == 'weekly':
            return "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
        elif period_type == 'monthly':
            return "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
        elif period_type == 'once':
            return "–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
        elif period_type == 'custom_days':
            return f"–ö–∞–∂–¥—ã–µ {period_value} –¥–Ω."
        elif period_type == 'weekdays':
            try:
                days = json.loads(period_value) if period_value else []
                day_names = [WEEKDAYS[d].replace('üìÖ ', '') for d in sorted(days)]
                return f"–ü–æ –¥–Ω—è–º: {', '.join(day_names)}"
            except:
                return "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏"
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
    async def handle_event_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "back_to_groups":
            user_id = update.effective_user.id
            events_by_group = self.user_data[user_id]['events_by_group']
            
            keyboard = []
            for group_name in events_by_group.keys():
                keyboard.append([f"üì± {group_name}"])
            keyboard.append(['üîô –ù–∞–∑–∞–¥'])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await query.edit_message_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π:")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π:",
                reply_markup=reply_markup
            )
            return VIEW_EVENTS
            
        elif data == "back_to_events":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã
            user_id = update.effective_user.id
            if user_id in self.user_data and 'events_by_group' in self.user_data[user_id]:
                events_by_group = self.user_data[user_id]['events_by_group']
                
                keyboard = []
                for group_name in events_by_group.keys():
                    keyboard.append([f"üì± {group_name}"])
                keyboard.append(['üîô –ù–∞–∑–∞–¥'])
                
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await query.edit_message_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π:")
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π:",
                    reply_markup=reply_markup
                )
                return VIEW_EVENTS
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
                keyboard = [
                    ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
                    ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    reply_markup=reply_markup
                )
                return MAIN_MENU
            
        elif data.startswith("confirm_delete_"):
            event_id = data.split("_", 2)[2]
            logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å ID: {event_id}")
            return await self._confirm_delete_event(update, context, event_id)
            
        elif data.startswith("delete_"):
            event_id = data.split("_", 1)[1]
            logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å ID: {event_id}")
            return await self._delete_event(update, context, event_id)
            
        elif data.startswith("edit_field_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "edit_field_" –∏ –ø–∞—Ä—Å–∏–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
            field_and_id = data[11:]  # –£–±–∏—Ä–∞–µ–º "edit_field_"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è –ø–æ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–æ–∫–∏
            if field_and_id.startswith("name_"):
                field_type = "name"
                event_id = field_and_id[5:]  # –£–±–∏—Ä–∞–µ–º "name_"
            elif field_and_id.startswith("start_date_"):
                field_type = "start_date"
                event_id = field_and_id[11:]  # –£–±–∏—Ä–∞–µ–º "start_date_"
            elif field_and_id.startswith("end_date_"):
                field_type = "end_date"
                event_id = field_and_id[9:]  # –£–±–∏—Ä–∞–µ–º "end_date_"
            elif field_and_id.startswith("time_"):
                field_type = "time"
                event_id = field_and_id[5:]  # –£–±–∏—Ä–∞–µ–º "time_"
            elif field_and_id.startswith("text_"):
                field_type = "text"
                event_id = field_and_id[5:]  # –£–±–∏—Ä–∞–µ–º "text_"
            elif field_and_id.startswith("period_"):
                field_type = "period"
                event_id = field_and_id[7:]  # –£–±–∏—Ä–∞–µ–º "period_"
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                parts = data.split("_")
                field_type = parts[2]
                event_id = "_".join(parts[3:])
                
            logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è {field_type} –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            try:
                rows = self.worksheet.get_all_records()
                event_data = None
                for row in rows:
                    row_id = row.get('ID') or row.get('id') or row.get('Id')
                    if row_id and str(row_id).strip() == str(event_id).strip():
                        event_data = row
                        break
                
                if not event_data:
                    await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return EDIT_EVENT
                
                event_status = event_data.get('Status', 'active').lower()
                if event_status in ['completed', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'error', '–æ—à–∏–±–∫–∞']:
                    await query.edit_message_text(
                        "‚ö†Ô∏è **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è**\n\n"
                        "–≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ."
                    )
                    return EDIT_EVENT
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è.")
                return EDIT_EVENT
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            user_id = update.effective_user.id
            if user_id not in self.user_data:
                self.user_data[user_id] = {}
            self.user_data[user_id]['editing_event_id'] = event_id
            self.user_data[user_id]['editing_field'] = field_type
            
            if field_type == "name":
                await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
                return ENTER_NAME
            elif field_type == "start_date":
                await query.edit_message_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
                return ENTER_START_DATE
            elif field_type == "end_date":
                await query.edit_message_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ '–Ω–∞–≤—Å–µ–≥–¥–∞' –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:")
                return ENTER_END_DATE
            elif field_type == "time":
                await query.edit_message_text("üïê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):")
                return ENTER_TIME
            elif field_type == "text":
                await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
                return ENTER_TEXT
            elif field_type == "period":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
                keyboard = [
                    ['üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', 'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'],
                    ['üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ', 'üìÖ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'],
                    ['üìÖ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π', 'üìÖ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏'],
                    ['üîô –ù–∞–∑–∞–¥']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await query.edit_message_text("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:")
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:",
                    reply_markup=reply_markup
                )
                return SELECT_PERIOD
            
            return EDIT_EVENT
            
        elif data.startswith("edit_") and not data.startswith("edit_field_"):
            event_id = data.split("_", 1)[1]
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å ID: {event_id}")
            return await self._show_event_edit_menu(update, context, event_id)
            
    async def _show_event_edit_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: str):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        query = update.callback_query

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        try:
            rows = self.worksheet.get_all_records()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets.")
            return EDIT_EVENT

        if not rows:
            logger.warning("Google Sheets –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.")
            await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return EDIT_EVENT

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ Google Sheets")
        logger.debug(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {rows}")

        # Log the keys of the first row for header debugging
        first_row_keys = list(rows[0].keys())
        logger.info(f"–ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {first_row_keys}")
        if 'ID' not in first_row_keys:
            logger.warning("–í–Ω–∏–º–∞–Ω–∏–µ: –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ 'ID'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏!")

        event_data = None

        logger.info(f"–ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ —Å ID: {event_id}")
        for row in rows:
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É: {row}")
            # Fallback logic for ID field
            row_id = row.get('ID') or row.get('id') or row.get('Id')
            if row_id is None:
                logger.warning(f"–°—Ç—Ä–æ–∫–∞ –±–µ–∑ ID: {row}")
                continue
            if not isinstance(row_id, str):
                logger.warning(f"ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π: {row_id} –≤ —Å—Ç—Ä–æ–∫–µ {row}")
                row_id = str(row_id)
            row_id = row_id.strip()
            if row_id == str(event_id).strip():
                event_data = row
                break

        if not event_data:
            logger.error(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Google Sheets")
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {rows}")
            await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return EDIT_EVENT

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        period_desc = self._get_period_description(event_data)
        
        text = str(event_data.get('Text', ''))  # Ensure Text is a string
        event_status = event_data.get('Status', 'active').lower()

        event_info = (
            f"üìù **–°–æ–±—ã—Ç–∏–µ: {event_data['Description']}**\n\n"
            f"üÜî ID: `{event_data.get('ID', 'N/A')}`\n"
            f"üîÑ –ü–µ—Ä–∏–æ–¥: {period_desc}\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {event_data.get('StartDate', 'N/A')}\n"
            f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {event_data.get('EndDate', '–í–µ—á–Ω–æ')}\n"
            f"üïê –í—Ä–µ–º—è: {event_data.get('Time', 'N/A')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {event_data.get('Status', 'N/A')}\n\n"
            f"üìÑ **–¢–µ–∫—Å—Ç:**\n{text[:200]}{'...' if len(text) > 200 else ''}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        if event_status in ['completed', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'error', '–æ—à–∏–±–∫–∞']:
            event_info += f"\n\n‚ö†Ô∏è **–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ**"
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_events")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field_name_{event_id}")],
                [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", callback_data=f"edit_field_start_date_{event_id}")],
                [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data=f"edit_field_end_date_{event_id}")],
                [InlineKeyboardButton("üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"edit_field_time_{event_id}")],
                [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_field_text_{event_id}")],
                [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", callback_data=f"edit_field_period_{event_id}")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"delete_{event_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_events")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            event_info,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return EDIT_EVENT
        
    async def _delete_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            rows = self.worksheet.get_all_records()
            
            if not rows:
                await query.edit_message_text("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
                return EDIT_EVENT
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º ID
            row_to_delete = None
            row_index = None
            
            for i, row in enumerate(rows):
                row_id = row.get('ID') or row.get('id') or row.get('Id')
                if row_id and str(row_id).strip() == str(event_id).strip():
                    row_to_delete = row
                    row_index = i + 2  # +2 because sheets are 1-indexed and first row is header
                    break
            
            if not row_to_delete:
                await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return EDIT_EVENT
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            event_name = row_to_delete.get('Description', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{event_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_{event_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ?\n"
                f"üìù **{event_name}**\n"
                f"üÜî ID: `{event_id}`\n\n"
                f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return EDIT_EVENT
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
            return EDIT_EVENT
    
    async def _confirm_delete_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            rows = self.worksheet.get_all_records()
            
            if not rows:
                await query.edit_message_text("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
                return EDIT_EVENT
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º ID
            row_index = None
            
            for i, row in enumerate(rows):
                row_id = row.get('ID') or row.get('id') or row.get('Id')
                if row_id and str(row_id).strip() == str(event_id).strip():
                    row_index = i + 2  # +2 because sheets are 1-indexed and first row is header
                    break
            
            if row_index is None:
                await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return EDIT_EVENT
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
            self.worksheet.delete_rows(row_index)
            logger.info(f"–°–æ–±—ã—Ç–∏–µ {event_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google Sheets")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            try:
                jobs_to_remove = [job for job in self.scheduler.get_jobs() if job.id.startswith(f"event_{event_id}_")]
                for job in jobs_to_remove:
                    job.remove()
                logger.info(f"–£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
            
            await query.edit_message_text(
                "‚úÖ **–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!**\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π..."
            )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
            import asyncio
            await asyncio.sleep(1)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
            from unittest.mock import MagicMock
            mock_message = MagicMock()
            mock_message.text = "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π"
            mock_message.reply_text = query.message.reply_text
            
            mock_update = MagicMock()
            mock_update.message = mock_message
            mock_update.effective_user = update.effective_user
            
            return await self.view_events(mock_update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
            return EDIT_EVENT

    def _create_test_event_data(self, chat_id, name, period_type, period_value, start_date, end_date, time, text, forever):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è"""
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_user_id = 999999  # –¢–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        self.user_data[test_user_id] = {
            'selected_group': chat_id,
            'event_name': name,
            'period_type': period_type,
            'period_value': period_value,
            'start_date': datetime.strptime(start_date, '%Y-%m-%d'),
            'end_date': datetime.strptime(end_date, '%Y-%m-%d') if end_date else None,
            'time': datetime.strptime(time, '%H:%M'),
            'text': text,
            'forever': forever
        }
        
        return test_user_id

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –Ω–∞—á–∞–ª–∞—Å—å")
        self._init_google_sheets()
        logger.info("Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        from telegram.ext import Application, CommandHandler, MessageHandler, filters
        from telegram import BotCommand

        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –Ω–∞—á–∞–ª–æ—Å—å")
        application = Application.builder().token(self.token).build()
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π...")
        try:
            rows = self.worksheet.get_all_records()
            active_events = [row for row in rows if row.get('Status') == 'active']
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(active_events)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            
            for event in active_events:
                try:
                    await self._schedule_event_jobs(event)
                    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event['ID']} - {event.get('Description', 'N/A')}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event['ID']}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: {e}")

        logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—á–∞–ª–æ—Å—å")
        application.add_handler(self.create_conversation_handler())
        application.add_handler(CommandHandler('help', self.help_command))
        application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, self.handle_group_message))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å")
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞"),
            BotCommand("cancel", "–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        ]
        await application.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
    async def _update_event_period(self, event_id: str, period_type: str, period_value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –≤ Google Sheets"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            rows = self.worksheet.get_all_records()
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for i, row in enumerate(rows):
                if str(row.get('ID', '')).strip() == str(event_id).strip():
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (—Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets –∏–Ω–¥–µ–∫—Å–∏—Ä—É—é—Ç—Å—è —Å 1, –ø–ª—é—Å 1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞)
                    row_num = i + 2
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
                    self.worksheet.update_cell(row_num, 8, period_type)  # PeriodType
                    if period_value is not None:
                        self.worksheet.update_cell(row_num, 9, str(period_value))  # PeriodValue
                    else:
                        self.worksheet.update_cell(row_num, 9, '')
                    
                    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                    await self._reschedule_event_jobs(event_id)
                    
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è {event_id}: {period_type}, {period_value}")
                    return True
                    
            logger.error(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
            return False
    
    async def _reschedule_event_jobs(self, event_id: str):
        """–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
            jobs_to_remove = [job for job in self.scheduler.get_jobs() if job.id.startswith(f"event_{event_id}_")]
            for job in jobs_to_remove:
                job.remove()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            rows = self.worksheet.get_all_records()
            event_data = None
            for row in rows:
                if str(row.get('ID', '')).strip() == str(event_id).strip():
                    event_data = row
                    break
            
            if event_data:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                await self._schedule_event_jobs(event_data)
                logger.info(f"–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
            else:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è {event_id} –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
    
    async def _show_event_edit_menu_inline(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: str):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        try:
            rows = self.worksheet.get_all_records()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets.")
            return EDIT_EVENT

        event_data = None
        for row in rows:
            if str(row.get('ID', '')).strip() == str(event_id).strip():
                event_data = row
                break

        if not event_data:
            await update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return EDIT_EVENT

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        period_desc = self._get_period_description(event_data)
        text = str(event_data.get('Text', ''))

        event_info = (
            f"üìù **–°–æ–±—ã—Ç–∏–µ: {event_data['Description']}**\n\n"
            f"üÜî ID: `{event_data.get('ID', 'N/A')}`\n"
            f"üîÑ –ü–µ—Ä–∏–æ–¥: {period_desc}\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {event_data.get('StartDate', 'N/A')}\n"
            f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {event_data.get('EndDate', '–í–µ—á–Ω–æ')}\n"
            f"üïê –í—Ä–µ–º—è: {event_data.get('Time', 'N/A')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {event_data.get('Status', 'N/A')}\n\n"
            f"üìÑ **–¢–µ–∫—Å—Ç:**\n{text[:200]}{'...' if len(text) > 200 else ''}"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field_name_{event_id}")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç—ã", callback_data=f"edit_field_dates_{event_id}")],
            [InlineKeyboardButton("üïê –í—Ä–µ–º—è", callback_data=f"edit_field_time_{event_id}")],
            [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data=f"edit_field_text_{event_id}")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", callback_data=f"edit_field_period_{event_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{event_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_events")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
        hide_keyboard = ReplyKeyboardRemove()
        
        await update.message.reply_text(
            event_info, 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=hide_keyboard
        )
        
        return EDIT_EVENT

        await application.run_polling(drop_pending_updates=True)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        bot = TelegramBot()
        # If running inside an environment with a running event loop (e.g., Jupyter/IDE),
        # we need to manually control PTB Application lifecycle to avoid 'Cannot close a running event loop'.
        from telegram.ext import Application
        import asyncio
        try:
            asyncio.get_running_loop()
            # Event loop is already running: manual PTB startup
            bot._init_google_sheets()
            application = Application.builder().token(bot.token).build()
            application.add_handler(bot.create_conversation_handler())
            application.add_handler(CommandHandler('help', bot.help_command))
            application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, bot.handle_group_message))
            commands = [
                BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
                BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞"),
                BotCommand("cancel", "–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            ]
            await application.bot.set_my_commands(commands)
            await application.initialize()
            await application.start()
            await application.updater.start_polling(drop_pending_updates=True)
            # Keep running until interrupted
            import signal
            stop_event = asyncio.Event()
            def _stop(*_):
                stop_event.set()
            signal.signal(signal.SIGINT, _stop)
            signal.signal(signal.SIGTERM, _stop)
            await stop_event.wait()
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
        except RuntimeError:
            # No running event loop: normal PTB run
            await bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    import asyncio
    try:
        asyncio.get_running_loop()
        # –ï—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, Jupyter/IDE)
        import nest_asyncio
        nest_asyncio.apply()
        loop = asyncio.get_event_loop()
        task = loop.create_task(main())
        # Don't call run_until_complete, just let the task run
    except RuntimeError:
        # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop ‚Äî –æ–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
        asyncio.run(main())