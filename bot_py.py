import json
import logging
import asyncio
import re
import uuid
import os
from datetime import datetime, timedelta, time, date
from typing import Dict, List, Optional, Any, Tuple
import pytz
import gspread
from google.oauth2.service_account import Credentials
from oauth2client.service_account import ServiceAccountCredentials
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, 
    ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand
)
from telegram.constants import ChatMemberStatus, ChatType
from telegram.ext import (
    Application, ContextTypes, ConversationHandler, CommandHandler,
    MessageHandler, CallbackQueryHandler, JobQueue, filters
)
from telegram.error import TelegramError
from telegram.constants import ChatMemberStatus, ChatType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
(MAIN_MENU, SELECT_CHAT, SELECT_TOPIC, ENTER_TOPIC_ID, ENTER_NAME, SELECT_PERIOD, ENTER_PERIOD_VALUE,
 SELECT_WEEKDAYS, ENTER_START_DATE, ENTER_END_DATE, ENTER_TIME, 
 ENTER_TEXT, CONFIRM_EVENT, VIEW_EVENTS, EDIT_EVENT, DELETE_EVENT,
 EDIT_FIELD) = range(17)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
PERIOD_TYPES = {
    'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
    'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', 
    'monthly': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
    'once': '–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è',
    'custom_days': '–ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π',
    'weekdays': '–í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏'
}

# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
WEEKDAYS = {
    0: 'üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    1: 'üìÖ –í—Ç–æ—Ä–Ω–∏–∫', 
    2: 'üìÖ –°—Ä–µ–¥–∞',
    3: 'üìÖ –ß–µ—Ç–≤–µ—Ä–≥',
    4: 'üìÖ –ü—è—Ç–Ω–∏—Ü–∞',
    5: 'üìÖ –°—É–±–±–æ—Ç–∞',
    6: 'üìÖ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

class TelegramBot:
    def _get_period_display_ru(self, period_type, period_value=None):
        mapping = {
            'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
            'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
            'monthly': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
            'once': '–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ',
            'custom_days': lambda v: f'–ö–∞–∂–¥—ã–µ {v} –¥–Ω–µ–π',
            'weekdays': lambda v: '–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏: ' + ', '.join([WEEKDAYS[d].replace('üìÖ ','') for d in v]) if v else '–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
        }
        if period_type == 'custom_days' and period_value:
            return mapping['custom_days'](period_value)
        if period_type == 'weekdays' and period_value:
            return mapping['weekdays'](period_value)
        return mapping.get(period_type, period_type)

    def _get_status_display_ru(self, status):
        if status == 'active':
            return '–∞–∫—Ç–∏–≤–Ω–æ'
        if status == 'inactive':
            return '–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ'
        if status == 'complete':
            return '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
        if status == 'error':
            return '–æ—à–∏–±–∫–∞'
        if status == 'Closed':
            return '–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ'
        if status == 'Open':
            return '–∞–∫—Ç–∏–≤–Ω–æ'
        return str(status)
    async def back_to_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
        if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
            reply_markup = ReplyKeyboardRemove()
        else:
            keyboard = [
                ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
                ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=reply_markup
        )
        return MAIN_MENU
    async def _get_available_chats(self, user_id: int, bot) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {chat_id: chat_name} –¥–ª—è —á–∞—Ç–æ–≤, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        """
        available_chats = {}
        all_chats = self._get_all_chats_from_sheets()
        
        for chat_id in all_chats:
            try:
                chat_member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
                if chat_member.status in (ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER):
                    chat_name = self._get_chat_name_by_id(chat_id)
                    available_chats[str(chat_id)] = chat_name
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return available_chats
    
    async def _get_forum_topics(self, bot, chat_id: int) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤ —Ñ–æ—Ä—É–º–∞ –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –∏–∑ Google Sheets.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {topic_id: topic_name} –∏–ª–∏ {None: "–û–±—â–∏–π —á–∞—Ç"} –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø.
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π —Å —Ñ–æ—Ä—É–º–æ–º
            chat = await bot.get_chat(chat_id)
            
            if hasattr(chat, 'is_forum') and chat.is_forum:
                # –î–ª—è —Ñ–æ—Ä—É–º–æ–≤ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ø–∏–∫–∏ –∏–∑ Google Sheets (–≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã—Ç—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                topics = self._get_chat_topics_from_sheets(chat_id, include_closed=True)
                
                # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π —á–∞—Ç
                result = {
                    None: "üí¨ –û–±—â–∏–π —á–∞—Ç (–±–µ–∑ —Ç–æ–ø–∏–∫–∞)"
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–∏
                for topic_id, topic_name in topics.items():
                    result[topic_id] = f"üìå {topic_name}"
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(topics)} —Ç–æ–ø–∏–∫–æ–≤ –≤ —Ñ–æ—Ä—É–º–µ {chat_id}")
                return result
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π —á–∞—Ç
                return {None: "üí¨ –û–±—â–∏–π —á–∞—Ç"}
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–ø–∏–∫–∞—Ö —á–∞—Ç–∞ {chat_id}: {e}")
            return {None: "üí¨ –û–±—â–∏–π —á–∞—Ç"}
    
    def _get_chat_name_by_id(self, chat_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ –µ–≥–æ ID –∏–∑ Google Sheets"""
        try:
            if not hasattr(self, 'topics_worksheet') or self.topics_worksheet is None:
                return str(chat_id)
                
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ Google Sheets
            all_data = self.topics_worksheet.get_all_records()
            
            for row in all_data:
                if str(row.get('ChatID')) == str(chat_id):
                    return row.get('ChatName', str(chat_id))
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            return str(chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ {chat_id}: {e}")
            return str(chat_id)

    def _save_chat_to_sheets(self, chat_id: int, chat_name: str, chat_type: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ Google Sheets"""
        try:
            if not hasattr(self, 'topics_worksheet') or self.topics_worksheet is None:
                logger.error("‚ùå Topics worksheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ —á–∞—Ç–µ
            all_data = self.topics_worksheet.get_all_records()
            chat_exists = False
            
            for row_index, row in enumerate(all_data, start=2):  # +2 –∏–∑-–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                if str(row.get('ChatID')) == str(chat_id):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    if row.get('ChatName') != chat_name:
                        self.topics_worksheet.update_cell(row_index, 2, chat_name)  # ChatName –≤ –∫–æ–ª–æ–Ω–∫–µ 2
                        logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ {chat_id}: {chat_name}")
                    chat_exists = True
                    break
            
            if not chat_exists:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —á–∞—Ç–µ (–±–µ–∑ —Ç–æ–ø–∏–∫–∞)
                row_data = [str(chat_id), chat_name, chat_type, "", "", "", datetime.now().isoformat()]
                self.topics_worksheet.append_row(row_data)
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç –≤ Google Sheets: {chat_name} (ID: {chat_id})")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞ –≤ Google Sheets: {e}")

    def _add_topic_to_sheets(self, chat_id: int, topic_id: int, topic_name: str, closed: bool = False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–ø–∏–∫ –≤ Google Sheets"""
        try:
            if not hasattr(self, 'topics_worksheet') or self.topics_worksheet is None:
                logger.error("‚ùå Topics worksheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
                
            chat_name = self._get_chat_name_by_id(chat_id)
            status = "Closed" if closed else "Open"
            
            logger.info(f"üìù –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø–∏–∫: ChatID={chat_id}, ChatName='{chat_name}', TopicName='{topic_name}', TopicID={topic_id}, Status={status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–ø–∏–∫ —Å —Ç–∞–∫–∏–º ChatID –∏ TopicID
            existing_data = self.topics_worksheet.get_all_records()
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(existing_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ Google Sheets")
            
            for row_index, row in enumerate(existing_data, start=2):  # +2 –∏–∑-–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                if (str(row.get('ChatID')) == str(chat_id) and 
                    str(row.get('TopicID')) == str(topic_id)):
                    logger.info(f"‚ö†Ô∏è –¢–æ–ø–∏–∫ —Å ID {topic_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫
                    if row.get('TopicName') != topic_name:
                        self.topics_worksheet.update_cell(row_index, 4, topic_name)  # TopicName –≤ –∫–æ–ª–æ–Ω–∫–µ 4
                        logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ {topic_id} –Ω–∞ '{topic_name}'")
                    
                    if row.get('Status') != status:
                        self.topics_worksheet.update_cell(row_index, 6, status)  # Status –≤ –∫–æ–ª–æ–Ω–∫–µ 6
                        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ç–æ–ø–∏–∫–∞ {topic_id} –Ω–∞ '{status}'")
                    
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —á–∞—Ç–∞ (–ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            chat_type = "SUPERGROUP"
            for row in existing_data:
                if str(row.get('ChatID')) == str(chat_id) and row.get('ChatType'):
                    chat_type = row.get('ChatType')
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫
            row_data = [str(chat_id), chat_name, chat_type, topic_name, str(topic_id), status, datetime.now().isoformat()]
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ Google Sheets: {row_data}")
            
            self.topics_worksheet.append_row(row_data)
            logger.info(f"‚úÖ –¢–æ–ø–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets: {chat_name} -> {topic_name} (ID: {topic_id})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –≤ Google Sheets: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")

    def _update_topic_in_sheets(self, chat_id: int, topic_id: int, name: str = None, closed: bool = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ø–∏–∫ –≤ Google Sheets"""
        try:
            if not hasattr(self, 'topics_worksheet') or self.topics_worksheet is None:
                logger.error("Topics worksheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            all_data = self.topics_worksheet.get_all_records()
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for row_index, row in enumerate(all_data, start=2):  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏ (1-—è = –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                if (str(row.get('ChatID')) == str(chat_id) and 
                    str(row.get('TopicID')) == str(topic_id)):
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    if name is not None:
                        self.topics_worksheet.update_cell(row_index, 4, name)  # TopicName –≤ –∫–æ–ª–æ–Ω–∫–µ 4
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ {topic_id} –Ω–∞ '{name}'")
                    
                    if closed is not None:
                        status = "Closed" if closed else "Open"
                        self.topics_worksheet.update_cell(row_index, 6, status)  # Status –≤ –∫–æ–ª–æ–Ω–∫–µ 6
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ç–æ–ø–∏–∫–∞ {topic_id} –Ω–∞ '{status}'")
                    
                    return
            
            # –ï—Å–ª–∏ —Ç–æ–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if name is not None:
                self._add_topic_to_sheets(chat_id, topic_id, name, closed or False)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –≤ Google Sheets: {e}")

    def _get_chat_topics_from_sheets(self, chat_id: int, include_closed: bool = False) -> Dict[int, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø–∏–∫–∏ —á–∞—Ç–∞ –∏–∑ Google Sheets"""
        try:
            if not hasattr(self, 'topics_worksheet') or self.topics_worksheet is None:
                logger.error("Topics worksheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return {}
                
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            all_data = self.topics_worksheet.get_all_records()
            
            topics = {}
            for row in all_data:
                if (str(row.get('ChatID')) == str(chat_id) and 
                    row.get('TopicID')):  # –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å TopicID (–Ω–µ –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏ —á–∞—Ç–æ–≤)
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç—ã–µ
                    if not include_closed and row.get('Status') != 'Open':
                        continue
                        
                    try:
                        topic_id = int(row.get('TopicID', 0))
                        topic_name = row.get('TopicName', '')
                        topic_status = row.get('Status', 'Open')
                        
                        if topic_id and topic_name:
                            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–æ–ø–∏–∫–æ–≤
                            display_name = topic_name
                            if topic_status == 'Closed':
                                display_name = f"{topic_name} [–ó–ê–ö–†–´–¢]"
                            topics[topic_id] = display_name
                    except (ValueError, TypeError):
                        continue
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ç–æ–ø–∏–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {topics}")
            return topics
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤ –∏–∑ Google Sheets: {e}")
            return {}
    
    def _check_topic_status(self, chat_id: int, topic_id: int) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–æ–ø–∏–∫–∞ (Open/Closed)"""
        try:
            if not hasattr(self, 'topics_worksheet') or self.topics_worksheet is None:
                return "Open"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º
                
            all_data = self.topics_worksheet.get_all_records()
            
            for row in all_data:
                if (str(row.get('ChatID')) == str(chat_id) and 
                    str(row.get('TopicID')) == str(topic_id)):
                    return row.get('Status', 'Open')
            
            return "Open"  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—á–∏—Ç–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ø–∏–∫–∞: {e}")
            return "Open"

    def _get_all_chats_from_sheets(self) -> Dict[str, dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —á–∞—Ç—ã –∏–∑ Google Sheets"""
        try:
            if not hasattr(self, 'topics_worksheet') or self.topics_worksheet is None:
                logger.error("Topics worksheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return {}
                
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            all_data = self.topics_worksheet.get_all_records()
            
            chats = {}
            for row in all_data:
                chat_id = str(row.get('ChatID'))
                if chat_id and chat_id not in chats:
                    chats[chat_id] = {
                        'title': row.get('ChatName', ''),
                        'type': row.get('ChatType', 'SUPERGROUP'),
                        'added_date': row.get('AddedDate', datetime.now().isoformat())
                    }
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤ –∏–∑ Google Sheets")
            return chats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ –∏–∑ Google Sheets: {e}")
            return {}
    
    def _add_topic_to_chat(self, chat_id: int, topic_id: int, topic_name: str, closed: bool = False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–ø–∏–∫ –≤ Google Sheets (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
        logger.info(f"_add_topic_to_chat –≤—ã–∑–≤–∞–Ω: chat_id={chat_id}, topic_id={topic_id}, topic_name={topic_name}")
        self._add_topic_to_sheets(chat_id, topic_id, topic_name, closed)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ø–∏–∫ {topic_id} '{topic_name}' –≤ —á–∞—Ç {chat_id}")
    
    def _update_topic_in_chat(self, chat_id: int, topic_id: int, name: str = None, closed: bool = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–∞ –≤ Google Sheets (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
        self._update_topic_in_sheets(chat_id, topic_id, name, closed)
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–ø–∏–∫ {topic_id} –≤ —á–∞—Ç–µ {chat_id}")
    
    def _remove_topic_from_chat(self, chat_id: int, topic_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–ø–∏–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞"""
        chat_data = self._get_chat_data(chat_id)
    def _remove_topic_from_chat(self, chat_id: int, topic_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–ø–∏–∫ –∏–∑ Google Sheets (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º)"""
        # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ø–∏–∫–∏ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ {topic_id} –∏–∑ —á–∞—Ç–∞ {chat_id} (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
    
    async def handle_group_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è ConversationHandler (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –≥—Ä—É–ø–ø–∞—Ö)"""
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è update –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if update.message:
            logger.info(f"üîç –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:")
            logger.info(f"    Chat ID: {update.effective_chat.id}")
            logger.info(f"    Chat Type: {update.effective_chat.type}")
            logger.info(f"    Message Thread ID: {getattr(update.message, 'message_thread_id', 'None')}")
            logger.info(f"    Text: {getattr(update.message, 'text', 'None')}")
            logger.info(f"    Forum Topic Created: {getattr(update.message, 'forum_topic_created', 'None')}")
            logger.info(f"    Forum Topic Edited: {getattr(update.message, 'forum_topic_edited', 'None')}")
            logger.info(f"    Forum Topic Closed: {getattr(update.message, 'forum_topic_closed', 'None')}")
            logger.info(f"    Forum Topic Reopened: {getattr(update.message, 'forum_topic_reopened', 'None')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–æ–ø–∏–∫–æ–≤ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
        if update.message:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
            if update.message.forum_topic_created:
                logger.info("üéØ –û–ë–ù–ê–†–£–ñ–ï–ù–û –°–û–ë–´–¢–ò–ï –°–û–ó–î–ê–ù–ò–Ø –¢–û–ü–ò–ö–ê - –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
                await self.handle_forum_topic_created(update, context)
                return
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
            if update.message.forum_topic_edited:
                logger.info("üéØ –û–ë–ù–ê–†–£–ñ–ï–ù–û –°–û–ë–´–¢–ò–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –¢–û–ü–ò–ö–ê - –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
                await self.handle_forum_topic_edited(update, context)
                return
                
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ–ø–∏–∫–∞
            if update.message.forum_topic_closed:
                logger.info("üéØ –û–ë–ù–ê–†–£–ñ–ï–ù–û –°–û–ë–´–¢–ò–ï –ó–ê–ö–†–´–¢–ò–Ø –¢–û–ü–ò–ö–ê - –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
                await self.handle_forum_topic_closed(update, context)
                return
                
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–ø–∏–∫–∞
            if update.message.forum_topic_reopened:
                logger.info("üéØ –û–ë–ù–ê–†–£–ñ–ï–ù–û –°–û–ë–´–¢–ò–ï –û–¢–ö–†–´–¢–ò–Ø –¢–û–ü–ò–ö–ê - –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
                await self.handle_forum_topic_reopened(update, context)
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Ç–æ–ø–∏–∫–µ (–≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞)
            message_thread_id = getattr(update.message, 'message_thread_id', None)
            if message_thread_id and update.effective_chat.type.name == 'SUPERGROUP':
                chat_id = update.effective_chat.id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–ø–∏–∫ –≤ Google Sheets
                topics = self._get_chat_topics_from_sheets(chat_id)
                if message_thread_id not in topics:
                    logger.info(f"üÜï –û–ë–ù–ê–†–£–ñ–ï–ù –ù–û–í–´–ô –¢–û–ü–ò–ö: ID {message_thread_id} - –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–µ
                        # –î–ª—è —ç—Ç–æ–≥–æ –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        text = getattr(update.message, 'text', None)
                        topic_name = text if text and len(text) < 100 else f"Topic_{message_thread_id}"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø–∏–∫
                        self._add_topic_to_chat(chat_id, message_thread_id, topic_name)
                        logger.info(f"‚úÖ –î–û–ë–ê–í–õ–ï–ù –ù–û–í–´–ô –¢–û–ü–ò–ö: {message_thread_id} '{topic_name}' –≤ —á–∞—Ç {chat_id}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞: {e}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç –≤ Google Sheets –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.effective_chat and update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP, ChatType.CHANNEL]:
            chat_id = update.effective_chat.id
            chat_title = update.effective_chat.title or f"–ß–∞—Ç {chat_id}"
            chat_type = update.effective_chat.type.name
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ Google Sheets
            await self._save_chat_name_to_sheets(chat_id, chat_title, chat_type)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞: {chat_title} ({chat_id})")
    async def handle_forum_topic_created(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞ –≤ —Ñ–æ—Ä—É–º–µ"""
        logger.info(f"üîÑ handle_forum_topic_created –≤—ã–∑–≤–∞–Ω")
        logger.info(f"üìã Update object: {update}")
        logger.info(f"üìã Update.message: {update.message if update.message else 'None'}")
        if update.message:
            logger.info(f"üìã forum_topic_created: {getattr(update.message, 'forum_topic_created', 'None')}")
            logger.info(f"üìã message_thread_id: {getattr(update.message, 'message_thread_id', 'None')}")
        
        try:
            if update.message and update.message.forum_topic_created:
                chat_id = update.effective_chat.id
                chat_title = update.effective_chat.title or f"–ß–∞—Ç {chat_id}"
                message_thread_id = update.message.message_thread_id
                topic_name = update.message.forum_topic_created.name
                
                logger.info(f"üìù –°–û–ó–î–ê–ù–ò–ï –¢–û–ü–ò–ö–ê: '{topic_name}' (ID: {message_thread_id}) –≤ —á–∞—Ç–µ '{chat_title}' ({chat_id})")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–ø–∏–∫–∞
                await self._save_chat_name_to_sheets(chat_id, chat_title, update.effective_chat.type.name)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø–∏–∫ –≤ Google Sheets
                self._add_topic_to_chat(chat_id, message_thread_id, topic_name)
                
                logger.info(f"‚úÖ –¢–û–ü–ò–ö –°–û–•–†–ê–ù–ï–ù: '{topic_name}' (ID: {message_thread_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets")
            else:
                logger.warning(f"‚ùå –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                logger.warning(f"‚ùå Update: {update}")
                if update.message:
                    logger.warning(f"‚ùå Message: {update.message}")
                    logger.warning(f"‚ùå forum_topic_created: {getattr(update.message, 'forum_topic_created', 'None')}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
    
    async def handle_forum_topic_edited(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –≤ —Ñ–æ—Ä—É–º–µ"""
        logger.info(f"üîÑ handle_forum_topic_edited –≤—ã–∑–≤–∞–Ω")
        logger.info(f"üìã Update object: {update}")
        logger.info(f"üìã Update.message: {update.message if update.message else 'None'}")
        if update.message:
            logger.info(f"üìã forum_topic_edited: {getattr(update.message, 'forum_topic_edited', 'None')}")
            logger.info(f"üìã message_thread_id: {getattr(update.message, 'message_thread_id', 'None')}")
        
        try:
            if update.message and update.message.forum_topic_edited:
                chat_id = update.effective_chat.id
                chat_title = update.effective_chat.title or f"–ß–∞—Ç {chat_id}"
                message_thread_id = update.message.message_thread_id
                
                logger.info(f"üîÑ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–ü–ò–ö–ê: ID {message_thread_id} –≤ —á–∞—Ç–µ '{chat_title}' ({chat_id})")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–ø–∏–∫–∞
                await self._save_chat_name_to_sheets(chat_id, chat_title, update.effective_chat.type.name)
                
                edited_data = update.message.forum_topic_edited
                new_name = edited_data.name if edited_data.name else None
                
                if new_name:
                    logger.info(f"üìù –ù–û–í–û–ï –ù–ê–ó–í–ê–ù–ò–ï –¢–û–ü–ò–ö–ê: '{new_name}'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–ø–∏–∫ –≤ Google Sheets
                    topics = self._get_chat_topics_from_sheets(chat_id)
                    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤ –≤ Google Sheets –¥–ª—è —á–∞—Ç–∞ {chat_id}: {len(topics)}")
                    
                    if message_thread_id in topics:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫
                        logger.info(f"üîÑ –û–ë–ù–û–í–õ–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –¢–û–ü–ò–ö {message_thread_id}")
                        self._update_topic_in_chat(chat_id, message_thread_id, name=new_name)
                        logger.info(f"‚úÖ –û–ë–ù–û–í–õ–ï–ù–û –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ {message_thread_id} –Ω–∞ '{new_name}' –≤ —á–∞—Ç–µ {chat_id}")
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫
                        logger.info(f"‚ûï –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ô –¢–û–ü–ò–ö {message_thread_id}")
                        self._add_topic_to_chat(chat_id, message_thread_id, new_name)
                        logger.info(f"‚úÖ –î–û–ë–ê–í–õ–ï–ù –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫ {message_thread_id} '{new_name}' –≤ —á–∞—Ç {chat_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –ø—É—Å—Ç–æ–µ")
                    # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ø–∏–∫ –ø–æ ID
                    topics = self._get_chat_topics_from_sheets(chat_id)
                    if message_thread_id not in topics:
                        logger.info(f"‚ûï –î–û–ë–ê–í–õ–Ø–ï–ú –¢–û–ü–ò–ö –ë–ï–ó –ù–ê–ó–í–ê–ù–ò–Ø: ID {message_thread_id}")
                        self._add_topic_to_chat(chat_id, message_thread_id, f"Topic_{message_thread_id}")
                    
            else:
                logger.warning(f"‚ùå –°–æ–±—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                logger.warning(f"‚ùå Update: {update}")
                if update.message:
                    logger.warning(f"‚ùå Message: {update.message}")
                    logger.warning(f"‚ùå forum_topic_edited: {getattr(update.message, 'forum_topic_edited', 'None')}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")

    async def _save_chat_name_to_sheets(self, chat_id: int, chat_title: str, chat_type: str = "SUPERGROUP"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID —á–∞—Ç–∞ –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ Google Sheets"""
        try:
            self._save_chat_to_sheets(chat_id, chat_title, chat_type)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: {chat_title} (ID: {chat_id})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞: {e}")

    async def init_topics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ø–∏–∫–æ–≤ —Ñ–æ—Ä—É–º–∞ –≤ Google Sheets"""
        try:
            chat = update.effective_chat
            if chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
                await update.message.reply_text(
                    "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            user_member = await context.bot.get_chat_member(chat.id, update.effective_user.id)
            if user_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                await update.message.reply_text(
                    "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."
                )
                return
            
            chat_info = await context.bot.get_chat(chat.id)
            if not (hasattr(chat_info, 'is_forum') and chat_info.is_forum):
                await update.message.reply_text(
                    "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä—É–º–∞—Ö. –í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥—Ä—É–ø–ø—ã."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ Google Sheets
            await self._save_chat_name_to_sheets(chat.id, chat.title, chat.type.name)
            
            await update.message.reply_text(
                "üîÑ **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫–æ–≤**\n\n"
                "–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google –¢–∞–±–ª–∏—Ü—É!\n\n"
                "üìå **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:**\n"
                "‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è\n"
                "‚Ä¢ –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è\n"
                "‚Ä¢ –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏/–æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–æ–ø–∏–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å\n\n"
                "üîç **–î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–ø–∏–∫–æ–≤:**\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫\n"
                "2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–±–µ–ª –∏ —É–±–µ—Ä–∏—Ç–µ)\n"
                "3. –¢–æ–ø–∏–∫ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É\n\n"
                "üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Google –¢–∞–±–ª–∏—Ü—É - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ Google Sheets
            topics = self._get_chat_topics_from_sheets(chat.id)
            
            if topics:
                topic_list = []
                for topic_id, topic_name in topics.items():
                    topic_list.append(f"‚Ä¢ {topic_name} (ID: {topic_id})")
                
                result_text = f"\n\nüìä **–£–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ ({len(topics)}):**\n\n" + "\n".join(topic_list[:10])
                if len(topics) > 10:
                    result_text += f"\n... –∏ –µ—â—ë {len(topics) - 10} —Ç–æ–ø–∏–∫–æ–≤"
                await update.message.reply_text(result_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ø–∏–∫–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ø–∏–∫–æ–≤: {str(e)}")
    
    async def handle_forum_topic_closed(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ–ø–∏–∫–∞ –≤ —Ñ–æ—Ä—É–º–µ"""
        logger.info(f"üîÑ handle_forum_topic_closed –≤—ã–∑–≤–∞–Ω")
        logger.info(f"üìã Update object: {update}")
        logger.info(f"üìã Update.message: {update.message if update.message else 'None'}")
        if update.message:
            logger.info(f"üìã forum_topic_closed: {getattr(update.message, 'forum_topic_closed', 'None')}")
            logger.info(f"üìã message_thread_id: {getattr(update.message, 'message_thread_id', 'None')}")
            logger.info(f"üìã reply_to_message: {getattr(update.message, 'reply_to_message', 'None')}")
        
        try:
            if update.message and update.message.forum_topic_closed:
                chat_id = update.effective_chat.id
                chat_title = update.effective_chat.title or f"–ß–∞—Ç {chat_id}"
                message_thread_id = update.message.message_thread_id
                
                logger.info(f"üîí –ó–ê–ö–†–´–¢–ò–ï –¢–û–ü–ò–ö–ê: ID {message_thread_id} –≤ —á–∞—Ç–µ '{chat_title}' ({chat_id})")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –∏–∑ reply_to_message
                topic_name = f"Topic_{message_thread_id}"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (update.message.reply_to_message and 
                    hasattr(update.message.reply_to_message, 'forum_topic_created') and
                    update.message.reply_to_message.forum_topic_created):
                    topic_name = update.message.reply_to_message.forum_topic_created.name
                    logger.info(f"üìù –ò–ó–í–õ–ï–ß–ï–ù–û –ù–ê–ó–í–ê–ù–ò–ï –ò–ó REPLY_TO_MESSAGE: '{topic_name}'")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
                await self._save_chat_name_to_sheets(chat_id, chat_title, update.effective_chat.type.name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–ø–∏–∫ –≤ Google Sheets (–≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã—Ç—ã–µ)
                topics = self._get_chat_topics_from_sheets(chat_id, include_closed=True)
                if message_thread_id in topics:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–ø–∏–∫–∞
                    self._update_topic_in_chat(chat_id, message_thread_id, name=topic_name, closed=True)
                    logger.info(f"‚úÖ –û–ë–ù–û–í–õ–ï–ù –ò –ó–ê–ö–†–´–¢ —Ç–æ–ø–∏–∫ {message_thread_id} '{topic_name}' –≤ —á–∞—Ç–µ {chat_id}")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø–∏–∫ —Å –∑–∞–∫—Ä—ã—Ç—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    self._add_topic_to_chat(chat_id, message_thread_id, topic_name, closed=True)
                    logger.info(f"‚úÖ –î–û–ë–ê–í–õ–ï–ù –ò –ó–ê–ö–†–´–¢ —Ç–æ–ø–∏–∫ {message_thread_id} '{topic_name}' –≤ —á–∞—Ç–µ {chat_id}")
            else:
                logger.warning(f"‚ùå –°–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ–ø–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ–ø–∏–∫–∞: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
    
    async def handle_forum_topic_reopened(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–æ–ø–∏–∫–∞ –≤ —Ñ–æ—Ä—É–º–µ"""
        logger.info(f"üîÑ handle_forum_topic_reopened –≤—ã–∑–≤–∞–Ω")
        logger.info(f"üìã Update object: {update}")
        logger.info(f"üìã Update.message: {update.message if update.message else 'None'}")
        if update.message:
            logger.info(f"üìã forum_topic_reopened: {getattr(update.message, 'forum_topic_reopened', 'None')}")
            logger.info(f"üìã message_thread_id: {getattr(update.message, 'message_thread_id', 'None')}")
            logger.info(f"üìã reply_to_message: {getattr(update.message, 'reply_to_message', 'None')}")
        
        try:
            if update.message and update.message.forum_topic_reopened:
                chat_id = update.effective_chat.id
                chat_title = update.effective_chat.title or f"–ß–∞—Ç {chat_id}"
                message_thread_id = update.message.message_thread_id
                
                logger.info(f"üîì –û–¢–ö–†–´–¢–ò–ï –¢–û–ü–ò–ö–ê: ID {message_thread_id} –≤ —á–∞—Ç–µ '{chat_title}' ({chat_id})")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –∏–∑ reply_to_message
                topic_name = f"Topic_{message_thread_id}"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (update.message.reply_to_message and 
                    hasattr(update.message.reply_to_message, 'forum_topic_created') and
                    update.message.reply_to_message.forum_topic_created):
                    topic_name = update.message.reply_to_message.forum_topic_created.name
                    logger.info(f"üìù –ò–ó–í–õ–ï–ß–ï–ù–û –ù–ê–ó–í–ê–ù–ò–ï –ò–ó REPLY_TO_MESSAGE: '{topic_name}'")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
                await self._save_chat_name_to_sheets(chat_id, chat_title, update.effective_chat.type.name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–ø–∏–∫ –≤ Google Sheets (–≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã—Ç—ã–µ)
                topics = self._get_chat_topics_from_sheets(chat_id, include_closed=True)
                if message_thread_id in topics:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–ø–∏–∫–∞
                    self._update_topic_in_chat(chat_id, message_thread_id, name=topic_name, closed=False)
                    logger.info(f"‚úÖ –û–ë–ù–û–í–õ–ï–ù –ò –û–¢–ö–†–´–¢ —Ç–æ–ø–∏–∫ {message_thread_id} '{topic_name}' –≤ —á–∞—Ç–µ {chat_id}")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø–∏–∫ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    self._add_topic_to_chat(chat_id, message_thread_id, topic_name, closed=False)
                    logger.info(f"‚úÖ –î–û–ë–ê–í–õ–ï–ù –ò –û–¢–ö–†–´–¢ —Ç–æ–ø–∏–∫ {message_thread_id} '{topic_name}' –≤ —á–∞—Ç–µ {chat_id}")
            else:
                logger.warning(f"‚ùå –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–æ–ø–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–æ–ø–∏–∫–∞: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
    
    async def handle_general_forum_topic_hidden(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –æ–±—â–µ–≥–æ —Ç–æ–ø–∏–∫–∞ —Ñ–æ—Ä—É–º–∞"""
        if update.message and update.message.general_forum_topic_hidden:
            chat_id = update.effective_chat.id
            logger.info(f"–°–∫—Ä—ã—Ç –æ–±—â–∏–π —Ç–æ–ø–∏–∫ –≤ —á–∞—Ç–µ {chat_id}")
    
    async def handle_general_forum_topic_unhidden(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–±—â–µ–≥–æ —Ç–æ–ø–∏–∫–∞ —Ñ–æ—Ä—É–º–∞"""
        if update.message and update.message.general_forum_topic_unhidden:
            chat_id = update.effective_chat.id
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –æ–±—â–∏–π —Ç–æ–ø–∏–∫ –≤ —á–∞—Ç–µ {chat_id}")

        return
    def create_conversation_handler(self):
        """–°–æ–∑–¥–∞—ë—Ç ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from telegram.ext import ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters

        return ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.main_menu)],
                SELECT_CHAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.select_chat)],
                SELECT_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.select_topic)],
                ENTER_TOPIC_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_topic_id)],
                ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_name)],
                SELECT_PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.select_period)],
                ENTER_PERIOD_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_period_value)],
                SELECT_WEEKDAYS: [CallbackQueryHandler(self.handle_weekday_selection)],
                ENTER_START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_start_date)],
                ENTER_END_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_end_date)],
                ENTER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_time)],
                ENTER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_text)],
                CONFIRM_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_confirm_event)],
                VIEW_EVENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_view_events)],
                EDIT_EVENT: [CallbackQueryHandler(self.handle_event_management)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
            allow_reentry=True,
            per_message=False
        )
    def __init__(self):
        self.token = self._load_token()
        self.service_account = self._load_service_account()
        self.user_data = {}
        self.sheets_client = None
        self.worksheet = None
        self.scheduler = None
        self.application = None
        self.timezone = pytz.timezone('Europe/Moscow')
        self.scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
        
    def _load_token(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        try:
            with open('bot_token.txt', 'r', encoding='utf-8') as f:
                return f.read().strip()
        except FileNotFoundError:
            logger.error("–§–∞–π–ª bot_token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise
            
    def _load_service_account(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Google"""
        try:
            with open('service_account.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error("–§–∞–π–ª service_account.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise
            
    def _init_google_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –Ω–∞—á–∞–ª–∞—Å—å")
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ service_account.json")
            # Load service account credentials
            credentials = ServiceAccountCredentials.from_json_keyfile_name('service_account.json', self.scope)
            logger.info(f"Service Account Email: {credentials.service_account_email}")
            # Connect to Google Sheets
            self.gc = gspread.authorize(credentials)
            self.worksheet = self.gc.open("BotEvents").sheet1
            logger.info(f"Google Sheet —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç: {self.worksheet.title}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º worksheet –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤
            try:
                # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º worksheet –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤
                try:
                    self.topics_worksheet = self.gc.open("BotEvents").worksheet("Topics")
                    logger.info("Worksheet 'Topics' –Ω–∞–π–¥–µ–Ω")
                except:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π worksheet –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤
                    self.topics_worksheet = self.gc.open("BotEvents").add_worksheet(title="Topics", rows="1000", cols="4")
                    logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π worksheet 'Topics'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤
                topics_headers = self.topics_worksheet.row_values(1)
                expected_topics_headers = ['ChatID', 'ChatName', 'ChatType', 'TopicName', 'TopicID', 'Status', 'AddedDate']
                
                if not topics_headers or topics_headers != expected_topics_headers:
                    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ –≤ Google Sheets")
                    self.topics_worksheet.clear()
                    self.topics_worksheet.append_row(expected_topics_headers)
                    logger.info("–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω—ã")
                    
            except Exception as topics_error:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ worksheet –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤: {topics_error}")
                self.topics_worksheet = None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            try:
                headers = self.worksheet.row_values(1)
                # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                # 1. ID —Å–æ–±—ã—Ç–∏—è, 2. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, 3. –ù–∞–∑–≤–∞–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                # 4. –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞, 5. –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è, 6. –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                # 7. –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å, 8. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, 9. –°—Ç–∞—Ç—É—Å
                expected_headers = ['ID', 'ChatID', 'Description', 'StartDate', 'EndDate', 'Time', 'PeriodType', 'Text', 'Status']
                
                if not headers or headers != expected_headers:
                    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Google Sheets")
                    self.worksheet.clear()
                    self.worksheet.append_row(expected_headers)
                    logger.info("–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
            except Exception as header_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {header_error}")
                
            logger.info("Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
            logger.warning("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ Google Sheets")
            self.worksheet = None
            self.topics_worksheet = None
            return False
            
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        keyboard = [
            ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
            ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram-–≥—Ä—É–ø–ø–∞—Ö.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        
        return MAIN_MENU
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
ü§ñ **–ë–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ–ø–∏–∫–æ–≤**

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é
‚Ä¢ üîñ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤ (—Ç–µ–º) –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤:**
‚Ä¢ üí¨ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç (–±–µ–∑ —Ç–æ–ø–∏–∫–∞)
‚Ä¢ üîñ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–ø–∏–∫ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
‚Ä¢ üî¢ –†—É—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞

**–¢–∏–ø—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω–æ
‚Ä¢ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
‚Ä¢ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π
‚Ä¢ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤):**
/start_bot - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
/init_topics - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫–∏ —Ñ–æ—Ä—É–º–∞

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
        
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        user_id = update.effective_user.id
        if user_id in self.user_data:
            del self.user_data[user_id]
            
        keyboard = [
            ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
            ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=reply_markup
        )
        return MAIN_MENU
    

    async def start_bot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            chat = update.effective_chat
            if chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
                await update.message.reply_text(
                    "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            user_member = await context.bot.get_chat_member(chat.id, update.effective_user.id)
            if user_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                await update.message.reply_text(
                    "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º
            chat_info = await context.bot.get_chat(chat.id)
            is_forum = hasattr(chat_info, 'is_forum') and chat_info.is_forum
            
            welcome_text = f"ü§ñ **–ë–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ {chat.title}!**\n\n"
            
            if is_forum:
                welcome_text += (
                    "üìã **–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**\n"
                    "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
                    "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤ —Ñ–æ—Ä—É–º–∞\n"
                    "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π\n\n"
                    "ÔøΩ **–†–∞–±–æ—Ç–∞ —Å —Ç–æ–ø–∏–∫–∞–º–∏:**\n"
                    "‚Ä¢ –¢–æ–ø–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /init_topics –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–ø–∏–∫–æ–≤\n\n"
                )
            else:
                welcome_text += (
                    "üìã **–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**\n"
                    "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
                    "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π\n\n"
                )
            
            welcome_text += (
                "‚öôÔ∏è **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
                "1. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è /start\n"
                "2. –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
                "3. –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n\n"
                "üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã."
            )
            
            await update.message.reply_text(welcome_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
    
    
    async def main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = update.message.text
        
        if text == 'üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ':
            if not hasattr(self, 'worksheet') or self.worksheet is None:
                await update.message.reply_text(
                    "‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return MAIN_MENU
            return await self.start_create_event(update, context)
        elif text == 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π':
            if not hasattr(self, 'worksheet') or self.worksheet is None:
                await update.message.reply_text(
                    "‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return MAIN_MENU
            return await self.view_events(update, context)
        elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
            await self.help_command(update, context)
            return MAIN_MENU
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é."
            )
            return MAIN_MENU
            
    async def start_create_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        available_chats = await self._get_available_chats(user_id, context.bot)
        
        if not available_chats:
            message_text = (
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —á–∞—Ç–æ–≤, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏–ª–∏ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç—ã.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."
            )
            
            if update.message:
                await update.message.reply_text(message_text)
            elif update.callback_query:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=message_text
                )
            return MAIN_MENU
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_data[user_id] = {
            'available_chats': available_chats,
            'step': 'select_chat'
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Ç–∞–º–∏
        keyboard = []
        for chat_id, chat_name in available_chats.items():
            keyboard.append([f"üí¨ {chat_name}"])
        keyboard.append(['üîô –ù–∞–∑–∞–¥'])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        message_text = "üí¨ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
        
        if update.message:
            await update.message.reply_text(message_text, reply_markup=reply_markup)
        elif update.callback_query:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message_text,
                reply_markup=reply_markup
            )
        
        return SELECT_CHAT
        
    async def select_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä —á–∞—Ç–∞"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            return await self.back_to_main_menu(update, context)
            
        # –ù–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
        if user_id not in self.user_data:
            return await self.start_create_event(update, context)
            
        available_chats = self.user_data[user_id]['available_chats']
        selected_chat_id = None
        
        for chat_id, chat_name in available_chats.items():
            if text == f"üí¨ {chat_name}":
                selected_chat_id = chat_id
                break
                
        if not selected_chat_id:
            await update.message.reply_text(
                "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
            return SELECT_CHAT
            
        self.user_data[user_id]['selected_chat'] = selected_chat_id
        self.user_data[user_id]['selected_chat_name'] = available_chats[selected_chat_id]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        available_topics = await self._get_forum_topics(context.bot, int(selected_chat_id))
        self.user_data[user_id]['available_topics'] = available_topics
        
        # –ï—Å–ª–∏ –≤ —á–∞—Ç–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π —Ç–æ–ø–∏–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–ø–∏–∫–∞
        if len(available_topics) == 1 and None in available_topics:
            self.user_data[user_id]['selected_topic'] = None
            self.user_data[user_id]['selected_topic_name'] = "–û–±—â–∏–π —á–∞—Ç"
            
            keyboard = [['üîô –ù–∞–∑–∞–¥']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç: {available_chats[selected_chat_id]}\n"
                f"üí¨ –¢–æ–ø–∏–∫: –û–±—â–∏–π —á–∞—Ç\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                reply_markup=reply_markup
            )
            return ENTER_NAME
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–ø–∏–∫–æ–≤
            keyboard = []
            for topic_id, topic_name in available_topics.items():
                keyboard.append([f"üîñ {topic_name}"])
            keyboard.append(['üîô –ù–∞–∑–∞–¥'])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç: {available_chats[selected_chat_id]}\n\n"
                "üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
            return SELECT_TOPIC
        
    async def select_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä —Ç–æ–ø–∏–∫–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        if update.message:
            text = update.message.text
        elif update.callback_query:
            text = update.callback_query.data
            await update.callback_query.answer()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∏ callback query, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
            keyboard = [
                ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
                ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            if update.callback_query:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    reply_markup=reply_markup
                )
            return MAIN_MENU
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            return await self.start_create_event(update, context)
            
        # –ù–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–ø–∏–∫
        if user_id not in self.user_data:
            return await self.start_create_event(update, context)
            
        available_topics = self.user_data[user_id]['available_topics']
        selected_topic_id = None
        selected_topic_name = None
        
        for topic_id, topic_name in available_topics.items():
            if text == f"üîñ {topic_name}":
                selected_topic_id = topic_id
                selected_topic_name = topic_name
                break
                
        if selected_topic_id is None and selected_topic_name is None:
            await update.message.reply_text(
                "‚ùå –¢–æ–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
            return SELECT_TOPIC
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ ID —Ç–æ–ø–∏–∫–∞
        if selected_topic_id == 'custom':
            keyboard = [['üîô –ù–∞–∑–∞–¥']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üî¢ –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–ø–∏–∫–∞ (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ):\n\n"
                "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —Ç–æ–ø–∏–∫–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω—É—é —Ç–µ–º—É –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ "
                "—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ URL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–æ—Ç—ã.",
                reply_markup=reply_markup
            )
            return ENTER_TOPIC_ID
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–ø–∏–∫
        if selected_topic_id is not None:  # –¢–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤, –Ω–µ –¥–ª—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞
            chat_id = int(self.user_data[user_id]['selected_chat'])
            topic_status = self._check_topic_status(chat_id, selected_topic_id)
            
            if topic_status == 'Closed':
                keyboard = []
                for topic_id, topic_name in available_topics.items():
                    keyboard.append([f"üîñ {topic_name}"])
                keyboard.append(['üîô –ù–∞–∑–∞–¥'])
                
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    f"‚ùå **–¢–æ–ø–∏–∫ –∑–∞–∫—Ä—ã—Ç!**\n\n"
                    f"–¢–æ–ø–∏–∫ '{selected_topic_name.replace('üìå ', '').replace(' [–ó–ê–ö–†–´–¢]', '')}' "
                    f"–≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —Ç–æ–ø–∏–∫.\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–ø–∏–∫ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                return SELECT_TOPIC
            
        self.user_data[user_id]['selected_topic'] = selected_topic_id
        self.user_data[user_id]['selected_topic_name'] = selected_topic_name
        
        keyboard = [['üîô –ù–∞–∑–∞–¥']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        chat_name = self.user_data[user_id]['selected_chat_name']
        await update.message.reply_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç: {chat_name}\n"
            f"üîñ –¢–æ–ø–∏–∫: {selected_topic_name}\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=reply_markup
        )
        
        return ENTER_NAME
        
    async def enter_topic_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ ID —Ç–æ–ø–∏–∫–∞ –≤—Ä—É—á–Ω—É—é"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–ø–∏–∫–∞
            available_topics = self.user_data[user_id]['available_topics']
            keyboard = []
            for topic_id, topic_name in available_topics.items():
                keyboard.append([f"üîñ {topic_name}"])
            keyboard.append(['üîô –ù–∞–∑–∞–¥'])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            chat_name = self.user_data[user_id]['selected_chat_name']
            await update.message.reply_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç: {chat_name}\n\n"
                "üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
            return SELECT_TOPIC
            
        try:
            topic_id = int(text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ø–∏–∫–∞
            chat_id = int(self.user_data[user_id]['selected_chat'])
            topic_status = self._check_topic_status(chat_id, topic_id)
            
            if topic_status == 'Closed':
                await update.message.reply_text(
                    f"‚ùå **–¢–æ–ø–∏–∫ –∑–∞–∫—Ä—ã—Ç!**\n\n"
                    f"–¢–æ–ø–∏–∫ #{topic_id} –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç. "
                    f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —Ç–æ–ø–∏–∫.\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–ø–∏–∫ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞.\n\n"
                    f"üî¢ –í–≤–µ–¥–∏—Ç–µ ID –¥—Ä—É–≥–æ–≥–æ —Ç–æ–ø–∏–∫–∞:",
                    parse_mode='Markdown'
                )
                return ENTER_TOPIC_ID
            
            self.user_data[user_id]['selected_topic'] = topic_id
            self.user_data[user_id]['selected_topic_name'] = f"–¢–æ–ø–∏–∫ #{topic_id}"
            
            keyboard = [['üîô –ù–∞–∑–∞–¥']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            chat_name = self.user_data[user_id]['selected_chat_name']
            await update.message.reply_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç: {chat_name}\n"
                f"üîñ –¢–æ–ø–∏–∫: #{topic_id}\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                reply_markup=reply_markup
            )
            
            return ENTER_NAME
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ID —Ç–æ–ø–∏–∫–∞."
            )
            return ENTER_TOPIC_ID
        
    async def enter_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
            if (user_id in self.user_data and 
                'editing_event_id' in self.user_data[user_id]):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback query –¥–ª—è _show_event_edit_menu
                from telegram import CallbackQuery
                fake_query = CallbackQuery(
                    id="fake",
                    from_user=update.effective_user,
                    chat_instance="fake",
                    data=f"edit_{event_id}",
                    message=update.message
                )
                fake_update = type('obj', (object,), {'callback_query': fake_query})()
                
                return await self._show_event_edit_menu(fake_update, context, event_id)
            else:
                return await self.start_create_event(update, context)
            
        if len(text) > 100:
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return ENTER_NAME
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        if (user_id in self.user_data and 
            'editing_event_id' in self.user_data[user_id] and
            'editing_field' in self.user_data[user_id] and
            self.user_data[user_id]['editing_field'] == 'name'):
            
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ Google Sheets
            event_id = self.user_data[user_id]['editing_event_id']
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                all_values = self.worksheet.get_all_values()
                for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        self.worksheet.update_cell(i, 3, text)  # –ö–æ–ª–æ–Ω–∫–∞ Description (3-—è)
                        break
                
                await update.message.reply_text(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {text}")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.")
                return EDIT_EVENT
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            self.user_data[user_id]['event_name'] = text
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
            keyboard = [
                ['üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', 'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'],
                ['üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ', 'üìÖ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'],
                ['üìÖ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π', 'üìÖ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏'],
                ['üîô –ù–∞–∑–∞–¥']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {text}\n\n"
                "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
            
            return SELECT_PERIOD
        
    async def select_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        is_editing = user_id in self.user_data and 'editing_event_id' in self.user_data[user_id]
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            if is_editing:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                return await self._show_event_edit_menu_inline(update, context, event_id)
            else:
                keyboard = [['üîô –ù–∞–∑–∞–¥']]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                    reply_markup=reply_markup
                )
                return ENTER_NAME
            
        period_map = {
            'üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ': 'daily',
            'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ': 'weekly',
            'üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ': 'monthly',
            'üìÖ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è': 'once',
            'üìÖ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π': 'custom_days',
            'üìÖ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏': 'weekdays'
        }
        
        if text not in period_map:
            await update.message.reply_text(
                "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
            return SELECT_PERIOD
            
        period_type = period_map[text]
        
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ, —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
        if is_editing:
            event_id = self.user_data[user_id]['editing_event_id']
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã "–ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π", –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if period_type == 'custom_days':
                self.user_data[user_id]['editing_period_type'] = period_type
                keyboard = [['üîô –ù–∞–∑–∞–¥']]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–æ—Ç 1 –¥–æ 365):",
                    reply_markup=reply_markup
                )
                return ENTER_PERIOD_VALUE
                
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            elif period_type == 'weekdays':
                self.user_data[user_id]['editing_period_type'] = period_type
                return await self.select_weekdays_menu(update, context)
            
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º
            else:
                try:
                    await self._update_event_period(event_id, period_type, None)
                    await update.message.reply_text("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    return await self._show_event_edit_menu_inline(update, context, event_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏: {e}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
                    return EDIT_EVENT
        
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        else:
            self.user_data[user_id]['period_type'] = period_type
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã "–ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π", –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if period_type == 'custom_days':
                keyboard = [['üîô –ù–∞–∑–∞–¥']]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–æ—Ç 1 –¥–æ 365):",
                    reply_markup=reply_markup
                )
                return ENTER_PERIOD_VALUE
                
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            elif period_type == 'weekdays':
                return await self.select_weekdays_menu(update, context)
                
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
            else:
                self.user_data[user_id]['period_value'] = None
                return await self.ask_start_date(update, context)
            
    async def enter_period_value(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        is_editing = user_id in self.user_data and 'editing_event_id' in self.user_data[user_id]
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            if is_editing:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                return await self._show_event_edit_menu_inline(update, context, event_id)
            else:
                keyboard = [
                    ['üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', 'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'],
                    ['üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ', 'üìÖ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'],
                    ['üìÖ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π', 'üìÖ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏'],
                    ['üîô –ù–∞–∑–∞–¥']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                    reply_markup=reply_markup
                )
                return SELECT_PERIOD
            
        try:
            days = int(text)
            if days < 1 or days > 365:
                raise ValueError
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 365."
            )
            return ENTER_PERIOD_VALUE
        
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ, —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
        if is_editing:
            event_id = self.user_data[user_id]['editing_event_id']
            period_type = self.user_data[user_id].get('editing_period_type', 'custom_days')
            
            try:
                await self._update_event_period(event_id, period_type, days)
                await update.message.reply_text("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                return await self._show_event_edit_menu_inline(update, context, event_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
                return EDIT_EVENT
        
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        else:
            self.user_data[user_id]['period_value'] = days
            return await self.ask_start_date(update, context)
        
    async def select_weekdays_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'selected_weekdays' not in self.user_data[user_id]:
            self.user_data[user_id]['selected_weekdays'] = set()
            
        selected_days = self.user_data[user_id]['selected_weekdays']
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for day_num, day_name in WEEKDAYS.items():
            prefix = "‚úÖ " if day_num in selected_days else "‚¨ú "
            keyboard.append([InlineKeyboardButton(
                f"{prefix}{day_name}", 
                callback_data=f"weekday_{day_num}"
            )])
            
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="weekdays_done")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="weekdays_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        selected_names = [WEEKDAYS[day] for day in sorted(selected_days)]
        selected_text = ", ".join(selected_names) if selected_names else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
        
        text = (
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏: {selected_text}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã:"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
            
        return SELECT_WEEKDAYS
        
    async def handle_weekday_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        data = query.data
        
        if data == "weekdays_back":
            keyboard = [
                ['üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', 'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'],
                ['üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ', 'üìÖ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'],
                ['üìÖ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π', 'üìÖ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏'],
                ['üîô –ù–∞–∑–∞–¥']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await query.edit_message_text("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
            return SELECT_PERIOD
        elif data == "weekdays_done":
            selected_days = self.user_data[user_id].get('selected_weekdays', set())
            if not selected_days:
                await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", show_alert=True)
                return SELECT_WEEKDAYS
            self.user_data[user_id]['period_value'] = list(selected_days)
            await query.edit_message_text("‚úÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω—ã")
            # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
            # –ü–µ—Ä–µ–¥–∞–µ–º update —Å message, —á—Ç–æ–±—ã ask_start_date —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            class FakeUpdate:
                def __init__(self, message):
                    self.message = message
                    self.callback_query = None
                    self.effective_user = update.effective_user
            fake_update = FakeUpdate(update.callback_query.message)
            return await self.ask_start_date(fake_update, context)
            
        elif data.startswith("weekday_"):
            day_num = int(data.split("_")[1])
            selected_days = self.user_data[user_id]['selected_weekdays']
            
            if day_num in selected_days:
                selected_days.remove(day_num)
            else:
                selected_days.add(day_num)
                
            return await self.select_weekdays_menu(update, context)
            
    async def ask_start_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
        keyboard = [['üîô –ù–∞–∑–∞–¥']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        today = datetime.now().strftime("%d.%m.%Y")
        
        text = (
            f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: {today}\n\n"
            f"–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '—Å–µ–≥–æ–¥–Ω—è' –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã:"
        )
        
        if update.callback_query:
            await context.bot.send_message(
                chat_id=update.callback_query.message.chat_id,
                text=text,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
            
        return ENTER_START_DATE
        
    async def enter_start_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
        user_id = update.effective_user.id
        text = update.message.text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        is_editing = user_id in self.user_data and 'editing_event_id' in self.user_data[user_id]
        
        if text == 'üîô –Ω–∞–∑–∞–¥':
            if is_editing:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if 'editing_event_id' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_event_id']
                if 'editing_field' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
            else:
                period_type = self.user_data[user_id].get('period_type', 'once')
                
                if period_type == 'custom_days':
                    keyboard = [['üîô –ù–∞–∑–∞–¥']]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await update.message.reply_text(
                        "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–æ—Ç 1 –¥–æ 365):",
                        reply_markup=reply_markup
                    )
                    return ENTER_PERIOD_VALUE
                elif period_type == 'weekdays':
                    return await self.select_weekdays_menu(update, context)
                else:
                    keyboard = [
                        ['üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', 'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'],
                        ['üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ', 'üìÖ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'],
                        ['üìÖ –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π', 'üìÖ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏'],
                        ['üîô –ù–∞–∑–∞–¥']
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await update.message.reply_text(
                        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                        reply_markup=reply_markup
                    )
                    return SELECT_PERIOD
                
        try:
            if text == '—Å–µ–≥–æ–¥–Ω—è':
                start_date = datetime.now().date()
            else:
                start_date = datetime.strptime(update.message.text, "%d.%m.%Y").date()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            if start_date < datetime.now().date():
                await update.message.reply_text(
                    "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
                )
                return ENTER_START_DATE
                
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è'."
            )
            return ENTER_START_DATE
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        if is_editing:
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ Google Sheets
            event_id = self.user_data[user_id]['editing_event_id']
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
                all_values = self.worksheet.get_all_values()
                for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        self.worksheet.update_cell(i, 4, start_date.strftime('%Y-%m-%d'))  # –ö–æ–ª–æ–Ω–∫–∞ StartDate (4-—è)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                        rows = self.worksheet.get_all_records()
                        event_data = None
                        for event_row in rows:
                            if str(event_row.get('ID', '')).strip() == str(event_id).strip():
                                event_data = event_row
                                break
                        
                        if event_data:
                            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
                            await self._reschedule_event_jobs(event_id)
                        
                        break
                
                await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {start_date.strftime('%d.%m.%Y')}")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if 'editing_event_id' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_event_id']
                if 'editing_field' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.")
                return EDIT_EVENT
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            self.user_data[user_id]['start_date'] = start_date
            
            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—Ä–µ–º–µ–Ω–∏
            period_type = self.user_data[user_id].get('period_type', 'once')
            if period_type == 'once':
                self.user_data[user_id]['end_date'] = None
                self.user_data[user_id]['forever'] = False
                return await self.ask_time(update, context)
            
            # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            keyboard = [
                ['‚ôæÔ∏è –í–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)'],
                ['üîô –ù–∞–∑–∞–¥']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date.strftime('%d.%m.%Y')}\n\n"
                f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                f"–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)':",
                reply_markup=reply_markup
            )
            
            return ENTER_END_DATE
        
    async def enter_end_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
            if (user_id in self.user_data and 
                'editing_event_id' in self.user_data[user_id]):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
            else:
                return await self.ask_start_date(update, context)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        if (user_id in self.user_data and 
            'editing_event_id' in self.user_data[user_id] and
            'editing_field' in self.user_data[user_id] and
            self.user_data[user_id]['editing_field'] == 'end_date'):
            
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            event_id = self.user_data[user_id]['editing_event_id']
            
            if text.lower() in ['–Ω–∞–≤—Å–µ–≥–¥–∞', 'forever', '‚ôæÔ∏è –≤–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)']:
                forever_value = True
                end_date_str = 'FOREVER'
            else:
                try:
                    end_date = datetime.strptime(text, "%d.%m.%Y").date()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Sheets
                    all_values = self.worksheet.get_all_values()
                    start_date_str = None
                    for row in all_values[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                            start_date_str = row[3]  # StartDate –≤ 4-–π –∫–æ–ª–æ–Ω–∫–µ
                            break
                    
                    if start_date_str:
                        start_date = datetime.strptime(start_date_str, "%Y-%m-%d").date()
                        if end_date <= start_date:
                            await update.message.reply_text(
                                "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞."
                            )
                            return ENTER_END_DATE
                    
                    forever_value = False
                    end_date_str = end_date.strftime('%Y-%m-%d')
                    
                except ValueError:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '–Ω–∞–≤—Å–µ–≥–¥–∞'."
                    )
                    return ENTER_END_DATE
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                all_values = self.worksheet.get_all_values()
                for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        self.worksheet.update_cell(i, 5, end_date_str)  # –ö–æ–ª–æ–Ω–∫–∞ EndDate (5-—è)
                        break
                
                if forever_value:
                    await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–¥–µ–ª–∞–Ω–æ –±–µ—Å—Å—Ä–æ—á–Ω—ã–º")
                else:
                    await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {text}")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
                return ENTER_END_DATE
        
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        if text == '‚ôæÔ∏è –í–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)':
            self.user_data[user_id]['end_date'] = None
            self.user_data[user_id]['forever'] = True
        else:
            try:
                end_date = datetime.strptime(text, "%d.%m.%Y").date()
                start_date = self.user_data[user_id]['start_date']
                
                if end_date <= start_date:
                    await update.message.reply_text(
                        "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞."
                    )
                    return ENTER_END_DATE
                    
                self.user_data[user_id]['end_date'] = end_date
                self.user_data[user_id]['forever'] = False
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
                )
                return ENTER_END_DATE
                
        return await self.ask_time(update, context)
        
    async def ask_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        keyboard = [['üîô –ù–∞–∑–∞–¥']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:30 –∏–ª–∏ 14:00",
            reply_markup=reply_markup
        )
        
        return ENTER_TIME
        
    async def enter_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
            if (user_id in self.user_data and 
                'editing_event_id' in self.user_data[user_id]):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
            else:
                period_type = self.user_data[user_id]['period_type']
                
                if period_type == 'once':
                    return await self.ask_start_date(update, context)
                else:
                    keyboard = [
                        ['‚ôæÔ∏è –í–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)'],
                        ['üîô –ù–∞–∑–∞–¥']
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    
                    start_date = self.user_data[user_id]['start_date']
                    await update.message.reply_text(
                        f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date.strftime('%d.%m.%Y')}\n\n"
                        f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                        f"–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í–µ—á–Ω–æ–µ (–±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è)':",
                        reply_markup=reply_markup
                    )
                    return ENTER_END_DATE
                
        try:
            time_obj = datetime.strptime(text, "%H:%M").time()
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)."
            )
            return ENTER_TIME
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        if (user_id in self.user_data and 
            'editing_event_id' in self.user_data[user_id] and
            'editing_field' in self.user_data[user_id] and
            self.user_data[user_id]['editing_field'] == 'time'):
            
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ Google Sheets
            event_id = self.user_data[user_id]['editing_event_id']
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                all_values = self.worksheet.get_all_values()
                for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        self.worksheet.update_cell(i, 7, time_obj.strftime('%H:%M'))  # –ö–æ–ª–æ–Ω–∫–∞ Time (7-—è)
                        break
                
                await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {time_obj.strftime('%H:%M')}")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                del self.user_data[user_id]['editing_event_id']
                del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.")
                return EDIT_EVENT
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            self.user_data[user_id]['time'] = time_obj
            
            keyboard = [['üîô –ù–∞–∑–∞–¥']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {time_obj.strftime('%H:%M')}\n\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )
        
        return ENTER_TEXT
        
    async def enter_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        is_editing = (user_id in self.user_data and 
                     'editing_event_id' in self.user_data[user_id] and
                     'editing_field' in self.user_data[user_id] and
                     self.user_data[user_id]['editing_field'] == 'text')
        
        if text == 'üîô –ù–∞–∑–∞–¥':
            if is_editing:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                event_id = self.user_data[user_id]['editing_event_id']
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if 'editing_event_id' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_event_id']
                if 'editing_field' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
            else:
                return await self.ask_time(update, context)
            
        if len(text) > 4096:
            await update.message.reply_text(
                "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return ENTER_TEXT
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏ –º—ã
        if is_editing:
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ Google Sheets
            event_id = self.user_data[user_id]['editing_event_id']
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                all_values = self.worksheet.get_all_values()
                for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        self.worksheet.update_cell(i, 10, text)  # –ö–æ–ª–æ–Ω–∫–∞ Text (10-—è)
                        break  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        self.worksheet.update_cell(i, 10, text)  # –ö–æ–ª–æ–Ω–∫–∞ Text (10-—è)
                        break
                
                await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if 'editing_event_id' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_event_id']
                if 'editing_field' in self.user_data[user_id]:
                    del self.user_data[user_id]['editing_field']
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏–π
                await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...")
                return await self.view_events(update, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.")
                return EDIT_EVENT
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            self.user_data[user_id]['text'] = text
            return await self.confirm_event(update, context)
        
    async def confirm_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user_id = update.effective_user.id
        data = self.user_data[user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
        period_type = data['period_type']
        if period_type == 'daily':
            period_desc = "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
        elif period_type == 'weekly':
            period_desc = "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
        elif period_type == 'monthly':
            period_desc = "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
        elif period_type == 'once':
            period_desc = "–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
        elif period_type == 'custom_days':
            period_desc = f"–ö–∞–∂–¥—ã–µ {data['period_value']} –¥–Ω."
        elif period_type == 'weekdays':
            days = [WEEKDAYS[d].replace('üìÖ ', '') for d in sorted(data['period_value'])]
            period_desc = f"–ü–æ –¥–Ω—è–º: {', '.join(days)}"
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç
        start_date_str = data['start_date'].strftime('%d.%m.%Y')
        if data.get('forever'):
            date_desc = f"—Å {start_date_str} (–≤–µ—á–Ω–æ)"
        elif data.get('end_date'):
            end_date_str = data['end_date'].strftime('%d.%m.%Y')
            date_desc = f"—Å {start_date_str} –ø–æ {end_date_str}"
        else:
            date_desc = f"–Ω–∞ {start_date_str}"
            
        preview_text = data['text'][:100] + "..." if len(data['text']) > 100 else data['text']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–µ
        topic_name = data.get('selected_topic_name', '–û–±—â–∏–π —á–∞—Ç')
        
        confirmation_text = (
            f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è**\n\n"
            f"üí¨ –ß–∞—Ç: {data['selected_chat_name']}\n"
            f"üîñ –¢–æ–ø–∏–∫: {topic_name}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['event_name']}\n"
            f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {period_desc}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_desc}\n"
            f"üïê –í—Ä–µ–º—è: {data['time'].strftime('%H:%M')}\n"
            f"üìÑ –¢–µ–∫—Å—Ç: {preview_text}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è?"
        )
        
        keyboard = [
            ['‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ'],
            ['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            confirmation_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return CONFIRM_EVENT
        
    async def handle_confirm_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == '‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ':
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Sheets
                event_id = await self._save_event_to_sheets(user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                rows = self.worksheet.get_all_records()
                event_data = None
                for row in rows:
                    if str(row.get('ID', '')).strip() == str(event_id).strip():
                        event_data = row
                        break
                
                if event_data:
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    await self._schedule_event_jobs(event_data)
                
                keyboard = [
                    ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
                    ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n"
                    f"ID —Å–æ–±—ã—Ç–∏—è: {event_id}\n\n"
                    f"–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
                    reply_markup=reply_markup
                )
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del self.user_data[user_id]
                return MAIN_MENU
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return CONFIRM_EVENT
                
        elif text == 'üîô –ù–∞–∑–∞–¥':
            keyboard = [['üîô –ù–∞–∑–∞–¥']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
            return ENTER_TEXT
            
        elif text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return await self.cancel(update, context)
    
    async def view_events(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            records = self.worksheet.get_all_records()
            
            if not records:
                keyboard = [
                    ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
                    ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                # –°–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–±—ã—Ç–∏–π
                if update.callback_query:
                    await update.callback_query.edit_message_text(
                        "üìã –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ'.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(
                        "üìã –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ'.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                return MAIN_MENU
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –Ω–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
            events_text = "üìã **–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:**\n\n"
            for i, event in enumerate(records, 1):
                event_id = event.get('ID', 'N/A')
                chat_identifier = event.get('ChatID', 'N/A')
                name = str(event.get('Description', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                start_date = event.get('StartDate', 'N/A')
                end_date = event.get('EndDate', 'N/A')
                time_val = event.get('Time', 'N/A')
                period = event.get('PeriodType', 'N/A')
                status = event.get('Status', 'N/A')

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
                chat_name = ""
                topic_name = "–û–±—â–∏–π —á–∞—Ç"
                if str(chat_identifier).startswith('topic:'):
                    topic_id = str(chat_identifier).split(':')[1]
                    chat_id = self._get_chat_id_by_topic_id(topic_id)
                    chat_name = self._get_chat_name_by_id(chat_id) if chat_id else chat_identifier
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
                    if hasattr(self, 'topics_worksheet') and self.topics_worksheet:
                        all_topics = self.topics_worksheet.get_all_records()
                        for row in all_topics:
                            if str(row.get('TopicID')) == str(topic_id):
                                topic_name = row.get('TopicName', topic_name)
                                break
                else:
                    chat_name = self._get_chat_name_by_id(chat_identifier)

                # –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                period_type = period
                period_value = None
                if str(period).startswith('every_') and str(period).endswith('_days'):
                    try:
                        period_value = int(str(period).split('_')[1])
                        period_type = 'custom_days'
                    except Exception:
                        pass
                elif str(period).startswith('weekdays_'):
                    try:
                        weekdays_str = str(period).replace('weekdays_', '')
                        period_value = [int(x) for x in weekdays_str.split(',') if x.strip()]
                        period_type = 'weekdays'
                    except Exception:
                        pass
                elif period in PERIOD_TYPES:
                    period_type = period

                period_display = self._get_period_display_ru(period_type, period_value)
                status_display = self._get_status_display_ru(status)

                events_text += f"{i}. **{name}**\n"
                events_text += f"   üìç –ß–∞—Ç: {chat_name}\n"
                events_text += f"   üîñ –¢–æ–ø–∏–∫: {topic_name}\n"
                events_text += f"   üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date if end_date != 'FOREVER' else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}\n"
                events_text += f"   ‚è∞ –í—Ä–µ–º—è: {time_val}\n"
                events_text += f"   üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {period_display}\n"
                events_text += f"   üÜî ID: `{event_id}`\n"
                events_text += f"   üìä –°—Ç–∞—Ç—É—Å: {status_display}\n\n"

            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏
            keyboard = []
            for event in records[:10]:
                event_id = event.get('ID', '')
                name = str(event.get('Description', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                keyboard.append([InlineKeyboardButton(
                    f"‚úèÔ∏è {name[:20]}...",
                    callback_data=f"edit_{event_id}"
                )])
            keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –°–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–±—ã—Ç–∏–π
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    events_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                # –£–¥–∞–ª—è–µ–º reply keyboard (–º–µ–Ω—é) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_user.id,
                        #text="–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                except Exception:
                    pass
            else:
                await update.message.reply_text(
                    events_text,
                    parse_mode='Markdown',
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                    reply_markup=reply_markup
                )
            return EDIT_EVENT
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–±—ã—Ç–∏–π: {e}")
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            return VIEW_EVENTS
    
    async def handle_view_events(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è VIEW_EVENTS"""
        return await self.view_events(update, context)
    
    async def handle_event_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "back_to_menu":
            keyboard = [
                ['üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π'],
                ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            return MAIN_MENU
        
        elif query.data == "back_to_events":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π
            return await self.view_events(update, context)
        
        elif query.data.startswith("edit_"):
            event_id = query.data.replace("edit_", "")
            return await self._show_event_edit_menu(update, context, event_id)
            
        elif query.data.startswith("deactivate_"):
            event_id = query.data.replace("deactivate_", "")
            return await self._deactivate_event(update, context, event_id)
            
        elif query.data.startswith("delete_"):
            event_id = query.data.replace("delete_", "")
            return await self._delete_event(update, context, event_id)
            
        elif query.data.startswith("confirm_delete_"):
            event_id = query.data.replace("confirm_delete_", "")
            return await self._confirm_delete_event(update, context, event_id)
            
        elif query.data.startswith("cancel_delete_"):
            event_id = query.data.replace("cancel_delete_", "")
            return await self._show_event_edit_menu(update, context, event_id)
            
        elif query.data.startswith("activate_"):
            event_id = query.data.replace("activate_", "")
            return await self._activate_event(update, context, event_id)
    
    async def _show_event_edit_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            records = self.worksheet.get_all_records()
            event_data = None
            
            for record in records:
                if str(record.get('ID', '')).strip() == str(event_id).strip():
                    event_data = record
                    break
            
            if not event_data:
                await update.callback_query.edit_message_text(
                    "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                )
                return await self.view_events(update, context)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
            chat_identifier = event_data.get('ChatID', 'N/A')
            chat_name = ""
            topic_name = "–û–±—â–∏–π —á–∞—Ç"
            if str(chat_identifier).startswith('topic:'):
                topic_id = str(chat_identifier).split(':')[1]
                chat_id = self._get_chat_id_by_topic_id(topic_id)
                chat_name = self._get_chat_name_by_id(chat_id) if chat_id else chat_identifier
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
                if hasattr(self, 'topics_worksheet') and self.topics_worksheet:
                    all_topics = self.topics_worksheet.get_all_records()
                    for row in all_topics:
                        if str(row.get('TopicID')) == str(topic_id):
                            topic_name = row.get('TopicName', topic_name)
                            break
            else:
                chat_name = self._get_chat_name_by_id(chat_identifier)

            # –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            period = event_data.get('PeriodType', 'N/A')
            period_type = period
            period_value = None
            if str(period).startswith('every_') and str(period).endswith('_days'):
                try:
                    period_value = int(str(period).split('_')[1])
                    period_type = 'custom_days'
                except Exception:
                    pass
            elif str(period).startswith('weekdays_'):
                try:
                    weekdays_str = str(period).replace('weekdays_', '')
                    period_value = [int(x) for x in weekdays_str.split(',') if x.strip()]
                    period_type = 'weekdays'
                except Exception:
                    pass
            elif period in PERIOD_TYPES:
                period_type = period
            period_display = self._get_period_display_ru(period_type, period_value)
            status_display = self._get_status_display_ru(event_data.get('Status', 'N/A'))

            event_info = f"üìù **–°–æ–±—ã—Ç–∏–µ: {event_data.get('Description', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n\n"
            event_info += f"üìç –ß–∞—Ç: {chat_name}\n"
            event_info += f"üîñ –¢–æ–ø–∏–∫: {topic_name}\n"
            event_info += f"üìÖ –ü–µ—Ä–∏–æ–¥: {event_data.get('StartDate', 'N/A')} - {event_data.get('EndDate', 'N/A')}\n"
            event_info += f"‚è∞ –í—Ä–µ–º—è: {event_data.get('Time', 'N/A')}\n"
            event_info += f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {period_display}\n"
            event_info += f"üìä –°—Ç–∞—Ç—É—Å: {status_display}\n"
            event_info += f"üÜî ID: `{event_id}`"

            # –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
            status = event_data.get('Status', 'N/A')
            if status == 'active':
                keyboard = [[InlineKeyboardButton("üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"deactivate_{event_id}")]]
            else:
                keyboard = [[InlineKeyboardButton("üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_{event_id}")]]
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{event_id}")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_events")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.callback_query.edit_message_text(
                event_info,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return EDIT_EVENT
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —Å–æ–±—ã—Ç–∏—è: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è."
            )
            return await self.view_events(update, context)
    
    async def _activate_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: str):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""
        try:
            all_records = self.worksheet.get_all_records()
            for row_index, record in enumerate(all_records, start=2):
                if str(record.get('ID', '')).strip() == str(event_id).strip():
                    self.worksheet.update_cell(row_index, 9, 'active')
                    break
            await update.callback_query.edit_message_text(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.\n\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
            await asyncio.sleep(2)
            return await self.view_events(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
            return EDIT_EVENT
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —Å–æ–±—ã—Ç–∏—è: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è."
            )
            return await self.view_events(update, context)
    
    async def _deactivate_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: str):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è –≤ Google Sheets
            all_records = self.worksheet.get_all_records()
            for row_index, record in enumerate(all_records, start=2):  # +2 –∏–∑-–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                if str(record.get('ID', '')).strip() == str(event_id).strip():
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ inactive (–∫–æ–ª–æ–Ω–∫–∞ 9 - Status)
                    self.worksheet.update_cell(row_index, 9, 'inactive')
                    
                    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                    job_id = f"event_{event_id}"
                    if self.scheduler.get_job(job_id):
                        self.scheduler.remove_job(job_id)
                        logger.info(f"–ó–∞–¥–∞—á–∞ {job_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
                    
                    break
            
            await update.callback_query.edit_message_text(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.\n\n"
                f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(2)
            return await self.view_events(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è."
            )
            return EDIT_EVENT
    
    async def _delete_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        keyboard = [
            [InlineKeyboardButton("‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{event_id}")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{event_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ {event_id}?\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return EDIT_EVENT
    
    async def _confirm_delete_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ Google Sheets
            all_records = self.worksheet.get_all_records()
            for row_index, record in enumerate(all_records, start=2):  # +2 –∏–∑-–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                if str(record.get('ID', '')).strip() == str(event_id).strip():
                    self.worksheet.delete_rows(row_index)
                    break
            
            await update.callback_query.edit_message_text(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} —É–¥–∞–ª–µ–Ω–æ."
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(2)
            return await self.view_events(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è."
            )
            return EDIT_EVENT
    
    def _get_chat_id_by_topic_id(self, topic_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ChatID –ø–æ TopicID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Topics"""
        try:
            if not hasattr(self, 'topics_worksheet') or self.topics_worksheet is None:
                logger.error("Topics worksheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
                
            all_data = self.topics_worksheet.get_all_records()
            
            for row in all_data:
                if str(row.get('TopicID')) == str(topic_id):
                    chat_id = row.get('ChatID')
                    if chat_id:
                        try:
                            return int(chat_id)
                        except (ValueError, TypeError):
                            continue
            
            logger.warning(f"ChatID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è TopicID {topic_id}")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ChatID –ø–æ TopicID {topic_id}: {e}")
            return None

    def _parse_chat_identifier(self, chat_identifier) -> Tuple[int, Optional[int]]:
        """–ü–∞—Ä—Å–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (chat_id, topic_id)"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω int
            chat_str = str(chat_identifier)
            
            if chat_str.startswith('topic:'):
                # –§–æ—Ä–º–∞—Ç: topic:123
                topic_id = int(chat_str.split(':')[1])
                chat_id = self._get_chat_id_by_topic_id(topic_id)
                if chat_id is None:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ChatID –¥–ª—è TopicID {topic_id}")
                    return None, None
                return chat_id, topic_id
            else:
                # –û–±—ã—á–Ω—ã–π ChatID
                return int(chat_str), None
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞ '{chat_identifier}': {e}")
            return None, None

    async def _save_event_to_sheets(self, user_id: int) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Sheets"""
        data = self.user_data[user_id]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è
        event_id = str(uuid.uuid4())[:8]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:
        # 1. ID —Å–æ–±—ã—Ç–∏—è
        # 2. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ (ChatID –∏–ª–∏ topic:X)
        # 3. –ù–∞–∑–≤–∞–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è  
        # 4. –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        # 5. –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–∏–ª–∏ —Ñ–ª–∞–≥ –≤–µ—á–Ω–æ—Å—Ç–∏)
        # 6. –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        # 7. –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
        # 8. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        # 9. –°—Ç–∞—Ç—É—Å (–∞–∫—Ç–∏–≤–Ω–æ/–∑–∞–≤–µ—Ä—à–µ–Ω–æ)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è - –µ—Å–ª–∏ forever=True, —Ç–æ 'FOREVER', –∏–Ω–∞—á–µ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        end_date_str = ''
        if data.get('forever'):
            end_date_str = 'FOREVER'
        elif data.get('end_date'):
            end_date_str = data['end_date'].strftime('%Y-%m-%d')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
        period_str = data['period_type']
        if data.get('period_value'):
            if data['period_type'] == 'custom_days':
                period_str = f"every_{data['period_value']}_days"
            elif data['period_type'] == 'weekdays':
                weekdays = data['period_value'] if isinstance(data['period_value'], list) else []
                period_str = f"weekdays_{','.join(map(str, weekdays))}"
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –§–æ—Ä–º–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
        topic_id = data.get('selected_topic', None)
        if topic_id is not None:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–æ–ø–∏–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º topic:X
            chat_identifier = f"topic:{topic_id}"
        else:
            # –ï—Å–ª–∏ –æ–±—â–∏–π —á–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ChatID
            chat_identifier = str(data['selected_chat'])
        
        row_data = [
            event_id,                                    # 1. ID —Å–æ–±—ã—Ç–∏—è
            chat_identifier,                             # 2. ChatID –∏–ª–∏ topic:X
            data['event_name'],                          # 3. –ù–∞–∑–≤–∞–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            data['start_date'].strftime('%Y-%m-%d'),     # 4. –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
            end_date_str,                                # 5. –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            data['time'].strftime('%H:%M'),              # 6. –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            period_str,                                  # 7. –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–±–µ–∑ TopicID)
            data['text'],                                # 8. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            'active'                                     # 9. –°—Ç–∞—Ç—É—Å
        ]
        
        try:
            logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Sheets –Ω–∞—á–∞–ª–æ—Å—å")
            logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: ChatIdentifier={chat_identifier}, TopicID={topic_id}, Period={period_str}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
            self.worksheet.append_row(row_data)
            logger.info("–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Sheets")
            
            return event_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Google Sheets: {e}")
            raise
            
    async def _schedule_event_jobs(self, event_data: Dict):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        if not event_data:
            return
            
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        await self._schedule_next_publication(event_data)
        
    async def _schedule_next_publication(self, event_data: Dict, job_queue=None):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data.get('ID', 'Unknown')}")
            
            start_date = datetime.strptime(event_data['StartDate'], '%Y-%m-%d').date()
            end_date_str = event_data.get('EndDate', '')
            end_date = None
            forever = False
            
            if end_date_str == 'FOREVER':
                forever = True
            elif end_date_str:
                end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()
            
            time_obj = datetime.strptime(event_data['Time'], '%H:%M').time()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º period_type, –æ—Ç–¥–µ–ª—è—è TopicID
            period_type_full = event_data['PeriodType']
            period_type = period_type_full
            
            # –û—Ç–¥–µ–ª—è–µ–º TopicID –æ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
            if '|topic:' in period_type_full:
                period_type = period_type_full.split('|topic:')[0]
            
            # –ü–∞—Ä—Å–∏–º period_type –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            period_value = None
            if period_type.startswith('every_') and period_type.endswith('_days'):
                try:
                    period_value = int(period_type.split('_')[1])
                    period_type = 'custom_days'
                except (IndexError, ValueError):
                    period_value = None
            elif period_type.startswith('weekdays_'):
                try:
                    weekdays_str = period_type.replace('weekdays_', '')
                    period_value = [int(x) for x in weekdays_str.split(',') if x.strip()]
                    period_type = 'weekdays'
                except ValueError:
                    period_value = None
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            now = datetime.now()
            next_datetime = None
            
            if period_type == 'once':
                next_datetime = datetime.combine(start_date, time_obj)
                if next_datetime <= now:
                    # –°–æ–±—ã—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                    logger.info(f"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {event_data['ID']} —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")
                    await self._update_event_status(event_data['ID'], 'complete')
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                if end_date and not forever and start_date > end_date:
                    logger.info(f"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {event_data['ID']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è ({start_date}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è ({end_date}) –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ")
                    await self._update_event_status(event_data['ID'], 'complete')
                    return
                    
            elif period_type == 'daily':
                # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                next_date = start_date
                while next_date <= datetime.now().date():
                    next_date += timedelta(days=1)
                next_datetime = datetime.combine(next_date, time_obj)
                
            elif period_type == 'weekly':
                # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                next_date = start_date
                while next_date <= datetime.now().date():
                    next_date += timedelta(weeks=1)
                next_datetime = datetime.combine(next_date, time_obj)
                
            elif period_type == 'monthly':
                # –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                next_date = start_date
                while next_date <= datetime.now().date():
                    if next_date.month == 12:
                        next_date = next_date.replace(year=next_date.year + 1, month=1)
                    else:
                        next_date = next_date.replace(month=next_date.month + 1)
                next_datetime = datetime.combine(next_date, time_obj)
                
            elif period_type == 'custom_days' and period_value:
                # –ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π
                next_date = start_date
                while next_date <= datetime.now().date():
                    next_date += timedelta(days=period_value)
                next_datetime = datetime.combine(next_date, time_obj)
                
            elif period_type == 'weekdays' and period_value:
                # –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
                next_date = start_date
                while True:
                    if next_date.weekday() in period_value and next_date > datetime.now().date():
                        break
                    next_date += timedelta(days=1)
                next_datetime = datetime.combine(next_date, time_obj)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if next_datetime is None:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']} —Å —Ç–∏–ø–æ–º –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ '{period_type}' (–∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: '{period_type_full}')")
                return
                
            if end_date and not forever and next_datetime.date() > end_date:
                logger.info(f"–°–æ–±—ã—Ç–∏–µ {event_data['ID']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ({next_datetime.date()}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è ({end_date}) –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è –Ω–∞ 'complete'
                await self._update_event_status(event_data['ID'], 'complete')
                return
            
            if next_datetime:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
                if hasattr(self, 'scheduler'):
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (0-5 —Å–µ–∫—É–Ω–¥) –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π
                    import random
                    random_delay = random.randint(0, 5)
                    next_datetime_with_delay = next_datetime + timedelta(seconds=random_delay)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π job_id, –≤–∫–ª—é—á–∞—é—â–∏–π –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π
                    timestamp_str = str(next_datetime_with_delay.timestamp()).replace('.', '_')
                    job_id = f"event_{event_data['ID']}_{timestamp_str}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–¥–∞—á–∞
                    existing_job = self.scheduler.get_job(job_id)
                    if existing_job:
                        logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {job_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º")
                    
                    self.scheduler.add_job(
                        self._publish_message_async,
                        'date',
                        run_date=next_datetime_with_delay,
                        args=[event_data],
                        id=job_id,
                        replace_existing=True
                    )
                    
                    if random_delay > 0:
                        logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']} –Ω–∞ {next_datetime_with_delay} (–∑–∞–¥–µ—Ä–∂–∫–∞: {random_delay}—Å, job_id: {job_id})")
                    else:
                        logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']} –Ω–∞ {next_datetime_with_delay} (job_id: {job_id})")
                else:
                    logger.error(f"‚ùå Scheduler –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
    
    async def _update_event_status(self, event_id: str, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è –≤ Google Sheets"""
        try:
            all_values = self.worksheet.get_all_values()
            for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                    self.worksheet.update_cell(i, 9, status)  # –ö–æ–ª–æ–Ω–∫–∞ Status (9-—è –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ)
                    break
            logger.info(f"–°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è {event_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
    
    async def _publish_message_async(self, event_data: Dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞
            chat_identifier = event_data['ChatID']
            logger.info(f"ChatIdentifier: {chat_identifier}")
            
            chat_id, topic_id = self._parse_chat_identifier(chat_identifier)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: chat_id={chat_id}, topic_id={topic_id}")
            
            if chat_id is None:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']}")
                return
            
            text = event_data['Text']
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            send_params = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': None
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–æ–ø–∏–∫–∞ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if topic_id is not None:
                send_params['message_thread_id'] = topic_id
                logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Ç–æ–ø–∏–∫ {topic_id} —á–∞—Ç–∞ {chat_id}")
            else:
                logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç {chat_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if hasattr(self, 'application') and self.application:
                await self.application.bot.send_message(**send_params)
                
                topic_info = f" –≤ —Ç–æ–ø–∏–∫ {topic_id}" if topic_id else ""
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —á–∞—Ç {chat_id}{topic_info} –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']}")
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if event_data['PeriodType'] != 'once':
                    logger.info(f"üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è —Å–æ–±—ã—Ç–∏—è {event_data['ID']}")
                    await self._schedule_next_publication(event_data)
                else:
                    logger.info(f"üìÖ –°–æ–±—ã—Ç–∏–µ {event_data['ID']} –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")
                    await self._update_event_status(event_data['ID'], 'complete')
            else:
                logger.error("Application –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_data.get('ID', 'unknown')}: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
    
    def _publish_message_sync(self, event_data: Dict):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        asyncio.create_task(self._publish_message_async(event_data))
    
    async def _reschedule_event_jobs(self, event_id: str):
        """–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            if hasattr(self, 'scheduler'):
                jobs_to_remove = []
                for job in self.scheduler.get_jobs():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å—Ç–∞—Ä—ã–π, –∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç job_id
                    if job.id.startswith(f"event_{event_id}_"):
                        jobs_to_remove.append(job.id)
                
                logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º {len(jobs_to_remove)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
                for job_id in jobs_to_remove:
                    self.scheduler.remove_job(job_id)
                    logger.info(f"   - –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {job_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            rows = self.worksheet.get_all_records()
            event_data = None
            for row in rows:
                if str(row.get('ID', '')).strip() == str(event_id).strip():
                    event_data = row
                    break
            
            if event_data:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                logger.info(f"üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
                await self._schedule_event_jobs(event_data)
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                logger.warning(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
    
    async def _update_event_period(self, event_id: str, period_type: str, period_value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è"""
        try:
            all_values = self.worksheet.get_all_values()
            for i, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if row[0] == event_id:  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                    self.worksheet.update_cell(i, 8, period_type)  # –ö–æ–ª–æ–Ω–∫–∞ PeriodType (8-—è)
                    period_value_str = json.dumps(period_value) if period_value else ''
                    self.worksheet.update_cell(i, 9, period_value_str)  # –ö–æ–ª–æ–Ω–∫–∞ PeriodValue (9-—è)
                    break
            
            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
            await self._reschedule_event_jobs(event_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
            raise
    
    async def _init_existing_topics_for_chat(self, chat_id: int, bot):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–ø–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä—É–º–∞"""
        try:
            chat = await bot.get_chat(chat_id)
            chat_title = chat.title or f"–ß–∞—Ç {chat_id}"
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç '{chat_title}' –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä—É–º–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º
            if not (hasattr(chat, 'is_forum') and chat.is_forum):
                logger.info(f"‚ö†Ô∏è –ß–∞—Ç '{chat_title}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º")
                return
                
            logger.info(f"üìå –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä—É–º–∞ '{chat_title}'")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            await self._save_chat_name_to_sheets(chat_id, chat_title)
            
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í Telegram Bot API –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–æ–≤ —Ñ–æ—Ä—É–º–∞
            # –¢–æ–ø–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            logger.info(f"‚úÖ –ß–∞—Ç '{chat_title}' –≥–æ—Ç–æ–≤ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é —Ç–æ–ø–∏–∫–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

    async def _init_all_known_chats(self, bot):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ø–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ Google Sheets"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ Google Sheets")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∏–∑ Google Sheets
            all_chats = self._get_all_chats_from_sheets()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_chats)} —á–∞—Ç–æ–≤ –≤ Google Sheets")
            
            for chat_id in all_chats:
                try:
                    await self._init_existing_topics_for_chat(chat_id, bot)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
                    
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤: {e}")

    async def _load_and_schedule_existing_events(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Sheets"""
        try:
            logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Sheets")
            
            if not hasattr(self, 'worksheet') or self.worksheet is None:
                logger.error("‚ùå Worksheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ Google Sheets
            records = self.worksheet.get_all_records()
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π –∏–∑ Google Sheets")
            
            active_events = []
            for record in records:
                status = record.get('Status', '').lower()
                if status == 'active':
                    active_events.append(record)
            
            logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(active_events)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            scheduled_count = 0
            events_by_time = {}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π
            for event in active_events:
                try:
                    start_date = datetime.strptime(event['StartDate'], '%Y-%m-%d').date()
                    time_obj = datetime.strptime(event['Time'], '%H:%M').time()
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    now = datetime.now()
                    if event['PeriodType'] == 'once':
                        next_datetime = datetime.combine(start_date, time_obj)
                    else:
                        # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π –±–µ—Ä–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å, –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞
                        next_date = start_date
                        while next_date <= now.date():
                            next_date += timedelta(days=1)
                        next_datetime = datetime.combine(next_date, time_obj)
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω—É—Ç—ã)
                    time_key = next_datetime.replace(second=0, microsecond=0)
                    if time_key not in events_by_time:
                        events_by_time[time_key] = []
                    events_by_time[time_key].append(event)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è {event.get('ID', 'Unknown')}: {e}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            for time_key, events_at_time in events_by_time.items():
                for idx, event in enumerate(events_at_time):
                    try:
                        event_id = event.get('ID', 'Unknown')
                        event_desc = event.get('Description', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        logger.info(f"üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {event_id} - {event_desc}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É (2 —Å–µ–∫—É–Ω–¥—ã) –¥–ª—è —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                        if idx > 0:
                            delay_seconds = idx * 2
                            logger.info(f"‚è±Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É {delay_seconds} —Å–µ–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
                            # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                            original_time = event['Time']
                            delayed_time_obj = (datetime.strptime(original_time, '%H:%M') + timedelta(seconds=delay_seconds)).time()
                            event['Time'] = delayed_time_obj.strftime('%H:%M')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                        if hasattr(self, 'scheduler'):
                            existing_jobs = [job.id for job in self.scheduler.get_jobs() if job.id.startswith(f"event_{event_id}")]
                            if existing_jobs:
                                logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {existing_jobs}")
                        
                        await self._schedule_event_jobs(event)
                        
                        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                        if idx > 0:
                            event['Time'] = original_time
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                        if hasattr(self, 'scheduler'):
                            new_jobs = [job.id for job in self.scheduler.get_jobs() if job.id.startswith(f"event_{event_id}")]
                            logger.info(f"üìù –ó–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {new_jobs}")
                        
                        scheduled_count += 1
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event.get('ID', 'Unknown')}: {e}")
                        logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
            
            # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            if hasattr(self, 'scheduler'):
                all_jobs = self.scheduler.get_jobs()
                event_jobs = [job for job in all_jobs if job.id.startswith("event_")]
                logger.info(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å–æ–±—ã—Ç–∏–π: {len(event_jobs)}")
                for job in event_jobs:
                    logger.info(f"   - {job.id}: {job.next_run_time}")
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {scheduled_count} –∏–∑ {len(active_events)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç Google Sheets
            if not hasattr(self, 'scheduler') or self.scheduler is None:
                from apscheduler.schedulers.asyncio import AsyncIOScheduler
                from apscheduler.executors.asyncio import AsyncIOExecutor
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º executor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
                executors = {
                    'default': AsyncIOExecutor()
                }
                
                job_defaults = {
                    'coalesce': False,  # –ù–µ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    'max_instances': 3,  # –ú–∞–∫—Å–∏–º—É–º 3 —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                    'misfire_grace_time': 30  # –í—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
                }
                
                self.scheduler = AsyncIOScheduler(
                    executors=executors,
                    job_defaults=job_defaults
                )
                self.scheduler.start()
                logger.info("APScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Sheets
            sheets_available = self._init_google_sheets()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            conv_handler = self.create_conversation_handler()
            self.application.add_handler(conv_handler)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö (–≤–Ω–µ –¥–∏–∞–ª–æ–≥–æ–≤)
            group_handler = MessageHandler(
                filters.ALL & ~filters.COMMAND & ~filters.UpdateType.EDITED_MESSAGE,
                self.handle_group_message
            )
            self.application.add_handler(group_handler)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ñ–æ—Ä—É–º–∞
            forum_handlers = [
                MessageHandler(filters.StatusUpdate.FORUM_TOPIC_CREATED, self.handle_forum_topic_created),
                MessageHandler(filters.StatusUpdate.FORUM_TOPIC_EDITED, self.handle_forum_topic_edited),
                MessageHandler(filters.StatusUpdate.FORUM_TOPIC_CLOSED, self.handle_forum_topic_closed),
                MessageHandler(filters.StatusUpdate.FORUM_TOPIC_REOPENED, self.handle_forum_topic_reopened),
                MessageHandler(filters.StatusUpdate.GENERAL_FORUM_TOPIC_HIDDEN, self.handle_general_forum_topic_hidden),
                MessageHandler(filters.StatusUpdate.GENERAL_FORUM_TOPIC_UNHIDDEN, self.handle_general_forum_topic_unhidden),
            ]
            
            for handler in forum_handlers:
                self.application.add_handler(handler)
            
            # –ö–æ–º–∞–Ω–¥—ã
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("start_bot", self.start_bot_command))
            self.application.add_handler(CommandHandler("init_topics", self.init_topics_command))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            async def error_handler(update, context):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
                logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
                if "Conflict" in str(context.error):
                    logger.error("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                    return
                logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
            
            self.application.add_error_handler(error_handler)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
            async def post_init(application):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
                #commands = [
                    #BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
                    #BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
                    #BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
                    #BotCommand("start_bot", "–°–ø—Ä–∞–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ"),
                    #BotCommand("init_topics", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫–∏ —Ñ–æ—Ä—É–º–∞")
                #]
                #await application.bot.set_my_commands(commands)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Google Sheets –¥–æ—Å—Ç—É–ø–µ–Ω
                if sheets_available:
                    await self._load_and_schedule_existing_events()
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
                    await self._init_all_known_chats(application.bot)
                else:
                    logger.warning("Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
                
                logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            self.application.post_init = post_init
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            try:
                self.application.run_polling(
                    allowed_updates=["message", "callback_query", "forum_topic_created", "forum_topic_edited", "forum_topic_closed", "forum_topic_reopened"],
                    drop_pending_updates=True
                )
            except Exception as polling_error:
                if "Conflict" in str(polling_error):
                    logger.error("‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                    logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ polling: {polling_error}")
                raise
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if hasattr(self, 'scheduler') and self.scheduler:
                self.scheduler.shutdown()
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = TelegramBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")